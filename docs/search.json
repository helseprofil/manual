[
  {
    "objectID": "vedlikehold.html",
    "href": "vedlikehold.html",
    "title": "Vedlikehold og utvikling",
    "section": "",
    "text": "For å vedlikeholde produksjonsapparatet uten at det blir rot bør man i hovedsak følge trinnene under. Dette sikrer at produksjonsbranchen (main/master) forblir stabil mellom oppdateringer. For hovedprosjektene er produksjonsbranchen beskyttet slik at dette er eneste måten man kan oppdatere koden på.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>"
    ]
  },
  {
    "objectID": "vedlikehold.html#opprette-issue-på-github",
    "href": "vedlikehold.html#opprette-issue-på-github",
    "title": "Vedlikehold og utvikling",
    "section": "1. Opprette issue på GitHub",
    "text": "1. Opprette issue på GitHub\nDersom du savner noe, eller finner ut at noe ikke fungerer som det skal, kan dette legges inn som en “issue” i det aktuelle repoet på GitHub. Her er det fint om problemet eller ønsket beskrives så detaljert som mulig, slik at det er tydelig hva som må gjøres. Alle kan melde inn ønsker på denne måten.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>"
    ]
  },
  {
    "objectID": "vedlikehold.html#lag-ny-branch-for-å-løse-en-issue",
    "href": "vedlikehold.html#lag-ny-branch-for-å-løse-en-issue",
    "title": "Vedlikehold og utvikling",
    "section": "2. Lag ny branch for å løse en issue",
    "text": "2. Lag ny branch for å løse en issue\nDen som skal oppdatere koden oppretter en ny branch fra dev, og gjør nødvendige endringer/utvikling i denne. Å opprette ny branch gjøres direkte i GitHub under issues, og denne sjekkes deretter ut lokalt. I khfunctions og khvalitetskontroll kan man bruke funksjonen usebranch(NAVN) for å laste inn en spesifikk versjon fra github for testing.\nFor KHvalitetskontroll og khfunctions er det vitkig å oppdatere verdien av .lastupdate for at oppdateringen skal kommuniseres til alle brukere. Funksjoner leses fra GitHub så dette er i hovedsak viktig for oppdatering av pakkeversjoner og lignende.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>"
    ]
  },
  {
    "objectID": "vedlikehold.html#pull-request",
    "href": "vedlikehold.html#pull-request",
    "title": "Vedlikehold og utvikling",
    "section": "3. Pull request",
    "text": "3. Pull request\nNår oppdateringen er komplett og ferdig testet, kan denne merges inn i dev eller main/master. Fortrinnsvis kan små oppdateringer merges til dev, før flere små endringer kan gå inn i produksjonsbranchen.\nFor å merge en branch må det opprettes en pull request på GitHub, der man forteller hvilken branch som skal merges med dev eller main/master. Når denne er godkjent vil de nye endringene merges. Da kan man gjerne også slette den ferdige feature-branchen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>"
    ]
  },
  {
    "objectID": "vedlikehold.html#innhold",
    "href": "vedlikehold.html#innhold",
    "title": "Vedlikehold og utvikling",
    "section": "Innhold:",
    "text": "Innhold:",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>"
    ]
  },
  {
    "objectID": "produksjon/orgdata.html",
    "href": "produksjon/orgdata.html",
    "title": "orgdata",
    "section": "",
    "text": "Orgdata er en R-pakke som brukes for å aggregere rådatafiler.\nFor å bruke orgdata åpner du produksjonsprosjektet og går til filen orgdata/orgdata brukerkode.Rmd. Denne inneholder eksempelkode som kan tilpasses til filen som skal kjøres. For å få tilgang til funksjonene må første kodeblokk med library(orgdata) kjøres.\nHovedfunksjonen i orgdata er make_file/lag_fil. Denne leser inn alle filer som skal benyttes, og aggregerer disse i tråd med parametrene som er satt opp i ACCESS-databasen.\n\n\nBruk av TYPE KB i kodebok for omkoding kan bare håndtere en-til-en omkoding. Men hvis det er behov for å omkode flere verdier til en felles verdi i samme kolonne, kan man bruke TYPE RE dvs. regulæruttryk eller rex, istedenfor. For eksample å omkode kolonne INNVKAT med verdi 1, 2, 3 eller 5, til 8 kan defineres som følgende. Alle eksempler nedenfor gir samme resultat.\nMed RE ved bruk av rex:\n\nMed RE ved bruk av regulæruttrykk:\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nRE\nrex(or(1:3,5))\n8\n\n\n\n\nAlle boolean symboler kan brukes her dvs. | og & for ELLER og OG.\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nRE\n1|2|3|5\n8\n\n\n\nMed standard KB omkoding dvs. 1-til-1 omkoding:\n\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nKB\n1\n8\n\n\nver1\nINNVKAT\nKB\n2\n8\n\n\nver1\nINNVKAT\nKB\n3\n8\n\n\nver1\nINNVKAT\nKB\n5\n8",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "orgdata"
    ]
  },
  {
    "objectID": "produksjon/orgdata.html#å-bruke-r-pakken",
    "href": "produksjon/orgdata.html#å-bruke-r-pakken",
    "title": "orgdata",
    "section": "",
    "text": "Orgdata er en R-pakke som brukes for å aggregere rådatafiler.\nFor å bruke orgdata åpner du produksjonsprosjektet og går til filen orgdata/orgdata brukerkode.Rmd. Denne inneholder eksempelkode som kan tilpasses til filen som skal kjøres. For å få tilgang til funksjonene må første kodeblokk med library(orgdata) kjøres.\nHovedfunksjonen i orgdata er make_file/lag_fil. Denne leser inn alle filer som skal benyttes, og aggregerer disse i tråd med parametrene som er satt opp i ACCESS-databasen.\n\n\nBruk av TYPE KB i kodebok for omkoding kan bare håndtere en-til-en omkoding. Men hvis det er behov for å omkode flere verdier til en felles verdi i samme kolonne, kan man bruke TYPE RE dvs. regulæruttryk eller rex, istedenfor. For eksample å omkode kolonne INNVKAT med verdi 1, 2, 3 eller 5, til 8 kan defineres som følgende. Alle eksempler nedenfor gir samme resultat.\nMed RE ved bruk av rex:\n\nMed RE ved bruk av regulæruttrykk:\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nRE\nrex(or(1:3,5))\n8\n\n\n\n\nAlle boolean symboler kan brukes her dvs. | og & for ELLER og OG.\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nRE\n1|2|3|5\n8\n\n\n\nMed standard KB omkoding dvs. 1-til-1 omkoding:\n\n\n\nLESID\nKOL\nTYPE\nFRA\nTIL\n\n\n\n\nver1\nINNVKAT\nKB\n1\n8\n\n\nver1\nINNVKAT\nKB\n2\n8\n\n\nver1\nINNVKAT\nKB\n3\n8\n\n\nver1\nINNVKAT\nKB\n5\n8",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "orgdata"
    ]
  },
  {
    "objectID": "produksjon/orgdata.html#access-database",
    "href": "produksjon/orgdata.html#access-database",
    "title": "orgdata",
    "section": "ACCESS-database",
    "text": "ACCESS-database\nParametre for hvordan de ulike filene skal behandles må settes opp i ACCESS-filen raw-database.accdb. For hver filgruppe må alle filer som skal inkluderes spesifiseres, og innlesingsspesifikasjoner fylles ut. Det må også angis hvor utfilen skal lagres, hvilke nivåer som skal aggregeres opp osv.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "orgdata"
    ]
  },
  {
    "objectID": "produksjon/orgdata.html#relevante-linker",
    "href": "produksjon/orgdata.html#relevante-linker",
    "title": "orgdata",
    "section": "Relevante linker:",
    "text": "Relevante linker:",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "orgdata"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html",
    "href": "produksjon/khfunctions.html",
    "title": "khfunctions",
    "section": "",
    "text": "khfunctions er et R-prosjekt som inneholder hoveddelen av koden som brukes for databehandling.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html#å-bruke-khfunctions",
    "href": "produksjon/khfunctions.html#å-bruke-khfunctions",
    "title": "khfunctions",
    "section": "Å bruke khfunctions",
    "text": "Å bruke khfunctions\nFor å bruke khfunctions åpner du produksjonsprosjektet og går til filen khfunctions/khfunctions brukerkode.Rmd. Denne inneholder eksempelkode for å lage filgrupper (stablede filer) og kuber (produksjonsklare datafiler). Det ligger også eksempler på hvordan du kan lagre fildumper på ulike steder i prosesseringen.\nFor å få tilgang til funksjonene må første kodeblokk med use_khfunctions() kjøres.\n\nDe to hovedfunksjonene i prosjektet er LagFilgruppe() og LagKUBE().\nParametre må settes opp i ACCESS-filen KHELSA.mdb, og logg skrives til ACCESS-filen KHlogg.mdb",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html#kontroll-av-siste-kjøring",
    "href": "produksjon/khfunctions.html#kontroll-av-siste-kjøring",
    "title": "khfunctions",
    "section": "Kontroll av siste kjøring",
    "text": "Kontroll av siste kjøring\n\nEtter kjøring kan du se resultatene direkte i objektet RESULTAT, som inneholder full datafil, den filen som skal publiseres, og filen som brukes til kvalitetskontroll.\nDu kan også se på loggfilene i ACCESS-databasen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html#produkter",
    "href": "produksjon/khfunctions.html#produkter",
    "title": "khfunctions",
    "section": "Produkter",
    "text": "Produkter\n\nLagFilgruppe() produserer filer som lagres i mappen PRODUKTER/MELLOMPROD/R/STABLAORG\nLagKube()genererer flere filer, som vil ha samme datotag.\n\nEn datafil som skal publiseres i statistikkbankene, lagret i PRODUKTER/KUBER/KOMMUNEHELSA/DATERT\nEn kvalitetskontrollfil, med ekstra uprikkede kolonner, lagret i PRODUKTER/KUBER/KOMMUNEHELSA/QC\nFriskvikfiler, lagret i de ulike friskvikmappene\nEn CSV-fil med ACCESS-spesifikasjoner på tidspunktet datafilen ble kjørt, lagret i PRODUKTER/KUBER/KOMMUNEHELSA/SPECS",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html#midlertidige-filer",
    "href": "produksjon/khfunctions.html#midlertidige-filer",
    "title": "khfunctions",
    "section": "Midlertidige filer",
    "text": "Midlertidige filer\n\nNår en kjøring inkluderer STATA-kode vil det lagres midlertidige filer som brukes av STATA. Dette gjelder for de fleste kuber pga STATA-prikking. De midlertidige filene lagres lokalt på din PC, i helseprofil-mappen, og overskrives forløpende. Dersom noe har gått galt i STATA, kan du finne .log-filen her.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions.html#relevante-linker",
    "href": "produksjon/khfunctions.html#relevante-linker",
    "title": "khfunctions",
    "section": "Relevante linker:",
    "text": "Relevante linker:",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html",
    "href": "produksjon/khfunctions-access.html",
    "title": "KHELSA.mdb",
    "section": "",
    "text": "Sist oppdatert: 06.11.2023\n(Påbegynt april 2015 i Word, senere oppdatert med nye ting, men er nok ikke komplett. Filen bærer preg av å være mine personlige notater. -stbj.)\nOBS! Denne filen er en konvertering fra .docx-filen på F-disk til .md. Layout (overskriftsstiler etc) er litt rotete, rydding er bare påbegynt. Bruk gjerne søk-funksjonen ovenfor for å finne det du leter etter. Du kan også se på pdf-fil",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#accessr-produksjonsapparat-for-folkehelseprofiler-brukerveiledning.",
    "href": "produksjon/khfunctions-access.html#accessr-produksjonsapparat-for-folkehelseprofiler-brukerveiledning.",
    "title": "KHELSA.mdb",
    "section": "Access/R produksjonsapparat for folkehelseprofiler: Brukerveiledning.",
    "text": "Access/R produksjonsapparat for folkehelseprofiler: Brukerveiledning.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#access-database-path",
    "href": "produksjon/khfunctions-access.html#access-database-path",
    "title": "KHELSA.mdb",
    "section": "Access-database, path:",
    "text": "Access-database, path:\n\\\\fhi.no\\Felles\\Forskningsprosjekter\\PDB 2455 - Helseprofiler og til_\\PRODUKSJON\\STYRING\\KHELSA.mdb\nKåre bemerket (jun-2016) at han med hensikt hadde holdt seg til det gamle Access-filformatet .mdb, og ikke brukt .accdb fra Office 2010. Han mente det var kommet til ytterligere bells and whistles i grensesnittet i det nye formatet, som ville heve brukerterskelen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#se-også-nederst",
    "href": "produksjon/khfunctions-access.html#se-også-nederst",
    "title": "KHELSA.mdb",
    "section": "Se også nederst!",
    "text": "Se også nederst!\nMer generelt om sammenhengen i databasen, og hvordan den brukes (konvensjoner) beskrives etter kapitlene om detaljert bruk.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#begreper",
    "href": "produksjon/khfunctions-access.html#begreper",
    "title": "KHELSA.mdb",
    "section": "Begreper",
    "text": "Begreper\n- Navigasjonsruta til venstre i Accessbildet har de ulike tabeller, skjemaer osv. samlet under deloverskrifter (Access-begrep: «grupper»). Disse nevnes i denne filen først i navnet på det objektet vi skal inn i, slik: «STYRING\\Filgrupper». Deloverskriftene vises når menyen er “Egendefinert” (klikk evt. liten ned-pil-i-en-ring til høyre for menytittelen).\n- Stablet fil: Alle de separate inndatafilene for en indikator (f.eks. alle årgangene) lagt oppå hverandre til én stor fil. DSS. filgruppe.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#arbeidsprinsipp",
    "href": "produksjon/khfunctions-access.html#arbeidsprinsipp",
    "title": "KHELSA.mdb",
    "section": "Arbeidsprinsipp",
    "text": "Arbeidsprinsipp\n- Prosessen har to hovedtrinn:\n1) Innlesing av leverte/nedlastede datafiler og produksjon av en «stablet fil».\n2) Kubeproduksjon, dvs. all videre behandling av stablet fil.\n- Det er bare ett nivå av lagret mellomprodukt: Stablet fil. Denne ligger som R-datafil (.RDS) under \\PRODUKTER\\MELLOMPROD\\R\\STABLAORG\\ …, og er normalt ikke meningen å behandle utenom systemet. Her ligger alle årganger, men normalt bare telleren (antall).\n- Hver gang noe skal leses inn (f.eks. ved ny årgang), leses samtlige tidligere originaldatafiler inn samtidig (det vil si, de som ikke er tatt ut av produksjonen). Stablet fil lages altså alltid på nytt fra bunnen, vi hekter ikke bare siste årgang bakpå en stor samlefil.\n- Både for innlesing (dvs. hva som må til for å få lest filene riktig inn) og produksjon av output-filer styres detaljene fra en Access-database. Dermed trenger vi ikke tukle med selve produksjons­scriptene for å gjøre endringer.\n- Innlesing kunne tidligere settes i gang inne fra Access med en programmert funksjonsknapp. Denne mekanismen er imidlertid ikke vedlikeholdt, selv om knappene fremdeles ligger der.\n- Kubeproduksjon (dvs. all output) kjøres direkte i R. (Det kan nok bli endret etter hvert)",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#pass-på",
    "href": "produksjon/khfunctions-access.html#pass-på",
    "title": "KHELSA.mdb",
    "section": "Pass på:",
    "text": "Pass på:\nKlikk alltid «Oppdater alt»-knappen for HVER tabell (etc) du er inne og redigerer i! Hvis jeg bare bytter til en annen tabell, har jeg opplevd at siste innlagte verdi ikke blir lagret.\nOG gå ut av den raden du har redigert i, så den ikke står i redigeringsmodus, FØR du klikker Oppdater.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#tabell-filgrupper",
    "href": "produksjon/khfunctions-access.html#tabell-filgrupper",
    "title": "KHELSA.mdb",
    "section": "Tabell FILGRUPPER:",
    "text": "Tabell FILGRUPPER:\nÉn linje per ferdig stablet fil. Det svarer alltid til en unik gruppe inputfiler.\nInnhold: Grunnleggende definisjoner for en filgruppe. Evt. R-syntakser for spesialbehandling.\n(Noe av denne informasjonen brukes også ved kubeproduksjon.)\n- Haker av for hvilke av standardvariablene som fins i innfilene.\n- Må oppgi: Hva betyr alder=ALLE? F.eks. at i denne filgruppen er det «16_69».\n- TAB1 (-2, -3): Dimensjoner i tillegg til de obligatoriske – hva SKAL de hete i den stablede filen.\n- B_STARTAAR: Når data for Bydeler kan brukes. F.eks 2004 betyr at tallene for bydeler før 2004 ikke skal brukes i KUBE pga. ukomplette, for få etc.. etc..\n- DK2020_STARTAAR: Sett “2020” dersom ORGdata er: inndelt etter kommune (ikke grunnkrets), med gamle kommunekoder, og er satt opp slik at missing betyr null. Det gjør at tall f.o.m. 2020 for delingskommuner får SPVFLAGG == 1, og dermed ikke serieprikkes.\n- SY_PAA_FILGR\n- RSYNT_SYPAA (Ikke implementert punkt!)\n- ValErAarsSnitt\n- VAL1navn (-2-, -3-): Tilsv. som TAB.., for verdikolonnene.\nVAL1navn er gjerne telleren.\nVAL2navn er ofte nevneren, hvis den følger med i inputfilene. (SEPARATE FILER: Se nedenfor)\n\nDERSOM inndatafilen inneholder verdikolonner vi ikke skal bruke (f.eks. ferdige prosenter), bare la være å nevne dem.\n\n- VAL1sumbar (-2-, -3-): Om verdiene kan aggregeres.\n- VAL1miss (-2-, -3-): Hvordan håndtere at VAL1 er missing? Skriv inn hvilken kode disse cellene skal ha: OBS: SJEKK AT JEG HAR FORSTÅTT DETTE RIKTIG!\n0 hvis det er implisitte nuller\n.. Manglende data\n- (…) VERSJONFRA, VERSJONTIL: Datoer for når/om denne spec’en er tatt inn eller ut av systemet.\n- FILTER1 (-2, -3): Ikke i bruk i scriptet. Kan brukes til flagging av rader i lista (for sortering etc).\n- RSYNT_PRE_FGLAGRING: R-syntaks som kjøres før den ferdige stablafilen lagres.\n\nF.eks. for å lage Middelfolkemengde fra befolkningsfil: Inndata har folketall 1.jan., R-syntaksen beregner flere versjoner av Middelfolkemengde, og det genereres noen ekstra variabler med disse Midbef-tallene. Stablafil har m.a.o. noen flere kolonner enn vanlige stablafiler.\n\n\nHvis Teller og Nevner leveres i separate filer,\nså leser vi dem inn til separate filgrupper og kobler dem sammen i KUBE-trinnet.\n\n\nDersom vi får en ny dataleveranse med samtlige årganger, men nytt format:\nIkke lag ny linje i tabellen, og ikke endre filgruppenavn – vi bare redigerer eksisterende linje.\nMEN da må vi også gå gjennom samtlige gamle inndatafiler (i neste verktøy, se neste avsnitt!) og sette «I bruk til»-dato lik i dag.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#skjema-styrfilgrupper",
    "href": "produksjon/khfunctions-access.html#skjema-styrfilgrupper",
    "title": "KHELSA.mdb",
    "section": "Skjema StyrFILGRUPPER:",
    "text": "Skjema StyrFILGRUPPER:\nViktigste styringsverktøy for innlesingen.\nSkjemaet har fire deler:\n\nEnkeltfelter øverst, som oppsummerer det som ble lagt inn i forrige avsnitt.\nEn tabell (her kalt Tabell 1) med én rad per unike inndatafil. (Den henter fra “ORIGINALFILERse” under LAG FILGRUPPE – MÅ BRUKE.)\nGir path og filnavn, noen grunnleggende opplysninger om filen, og forteller hvilken av radene i tabell 2 som skal brukes.\nEn tabell (Tabell 2, ledetekst «INNLESING») med én rad per sett av innlesingsparametre innen samme filgruppe («Innlesingsspec»). (Den henter fra tabell INNLESING)\nGir de detaljene som gjør at én bestemt inndatafil blir lest inn riktig og evt. reshapet til korrekt («long») format.\nEt større skjema (ledetekst «StyrFILGRUPPER EnInnles», heading INNLESING), som viser den valgte raden fra tabell 2 så man ser flere detaljer i ett blikk.\n\nNår flere inndatafiler er like, kan de i tabell 1 kobles til samme innlesingsspec ved å oppgi navnet på spec’en. Da får man flere rader i tabell 1 for hver rad i tabell 2.\nHVIS SAMME INNDATAFIL skal brukes i flere filgrupper: Se nedenfor!\n\nOG hvis du ikke får lov å skrive inn filnavnet: Sjekk i tabell ORIGINALFILERse om den ligger inne fra før…\n\nHvis man skal lese inn samme fil flere ganger bare med ulik delID/spec:\n\ngå til «ORGINNLESkobl» - her kopierer man FILID på den filen man skal duplisere og legge inn samme filgruppe (med mindre den skal brukes i en annen) og den nye delID/spec. Når man har oppdatert dette, går man tilbake til «styrFILGRUPPER» og oppdaterer, og da skal de nye innlesingene være der.\n\n\nBruk:\nVelg riktig filgruppe: Verktøyknapp «Sorter og filtrer/Avansert/Filtrer etter skjema» gir nedtrekksmeny i det valgte feltet nedenfor. Velg riktig filgruppe (En ny filgruppe vil ikke ligge i lista, da skrives navnet), og klikk «Aktiver/deaktiver filter».\nDERSOM ovennevnte klikk ikke funker:\nSett markøren i skjemafeltet FILGRUPPE, og klikk knappen Filtrer (stort traktsymbol). Da kommer en rullegardin under feltet, som er bredere (lettere å se FG-navnene) og har avkrysningsbokser. Huk av riktig FG og klikk OK.\nFor å fylle ut Tabell 2 kan det lønne seg å åpne inndatafilen for å se hvordan den er.\n\nHvis det blir feilmeldinger og skjæring: Vi fikk det til en gang ved å gå i tabellene i bakgrunnen (ORIGINALFILERse, f.eks. (siden filen allerede var innlest, men uten å skrive inn FILGRUPPE, så den havnet et annet sted i systemet)) og slette hele raden, og begynne på nytt.\n\n\n\nFeltene vi må forholde oss til:\n\n\nTabell 1:\n- LEVERANDØR: Må fylles ut først, ellers nekter Access. Ved utfylling kommer feilmelding. Klikk OK, så lagres det likevel.\n- FILGRUPPE: Samme navn som brukt tidligere. TIPS: Hvis du ikke får lov å skrive i feltet, piltast litt mot høyre og venstre, så gir den seg …\n- DELID: Navnet på den innlesingsspec’en som skal brukes (se tabell 2).\n- FILNAVN: Må inkludere path fra første nivå under F:\\Prosjekter\\Kommunehelsa\\PRODUKSJON\\. Det vil i nåværende system si: ORGDATA\\&lt;leverandør&gt;\\&lt;tema&gt;\\ORG\\&lt;profilår&gt;\\&lt;filnavn.ext&gt;\n- FORMAT: Datatypen for inndatafilen (selv om den også var med i &lt;filnavn.ext&gt;). OBS: Ikke dss. filtypen: En CSV-fil har format CSV, selv om den heter «data.txt».\n\nANM: per 26.6.2015 hadde vi IKKE type «DTA»/Stata implementert! Men det er kjapt å lage.\n\n- LEVERANSEAAR: Det samme som profilår, dvs. det året dataene er (eller kunne vært) med i profilene. For data levert etter at profilene er laget, settes året etter.\n- IBRUKFRA: Dokumenterer når denne filen ble innlemmet i systemet. Som default kommer dagens dato ved første kjøring av innlesingsprosessen, men ofte settes den datoen filen ble f.eks. lastet ned fra SSB Statistikkbanken.\n- IBRUKTIL: Standardverdi: 01.01.9999. Her settes dagens dato når vi avslører feil e.l. i en fil, som gjør at den ikke skal brukes mer. Da flyttes den filen fysisk fra …\\ORG\\… til …\\GML\\… (**), og dette faktum rettes i filnavnet i tabell 1. Til-datoen er egentlig første dag denne filen ikke skal regnes med lenger.\n\n(**) Dette trengs ikke hvis hele tidsserien er erstattet i den nye leveransen.\n\nMEN OBS: Jeg lagde ny innlesingsspec for MFR Keisersnitt_NH. Måtte sette “ibruktil” på forrige årgangsfil for at systemet skulle ta min nye fil.\n\n\nTabell 2 (INNLESING): Selve innlesingsspec’en.\n(Her vises én enkelt rad fra tabellen STYRING\\INNLESING – men ikke alle feltene.)\n(Dette kan kanskje gjøres også i skjemaet 4, nederst i skjermbildet, men det har vi ikke testet.)\n(Marie sa først at det kan være greit å få på plass de andre tingene først, og så ta RESHAPE-argumentene etterpå. Men rekkefølgen i prosesseringen er ikke lik rekkefølgen i dette skjemaet, så noen ting høyere opp faller ikke på plass før reshape virker.)\nOBS: Feltene GRUNNKRETS, SONER, SKALA_VAL1 (-2 -3) og KOPI_KOL vises ikke i skjemaet! Må fylles ut i selve tabellen INNLESING.\n- FILGRUPPE: Som før.\n- DELID: Nytt navn for hver ny rad.\n- INNLESARG: Argumentene til innlesingsfunksjonen, se nedenfor. OBS: Dette slår inn FØR Rsynt1, så ting man skriver her kan påvirke inndataene til Rsynt1.\n\n- CSV-fil som er ekte kommaseparert (ikke semikolon): skriv sep = “,” .\n- Fil med norske tegn som leses feil (scrambles): skriv encoding=”latin1” .\n\n- MANHEADER: Kan styre hvilke kolonner som får hvilken header.\n\nSyntaks: [1,3,6,7:34]=c(“GEO”,“KJONN”,“ALDER”,1986:2013)\n\n- KASTKOLS: Kan spesifisere kolonner som skal droppes.\n\nSyntaks: c(2,4,5,35,36,37)\n(Begge de to siste: Se f.eks. tabell INNLESING, Filgruppe BEFOLK, ID nr. 9. )\nOBS: Denne parameteren slår inn etter RSYNT1. Hvis kolonner lager krøll i RSYNT1, hjelper det ikke å KASTe dem her.\n\n- FYLLTAB: Navn på TAB-kolonner (dvs. dimensjoner) som i datafilen ikke er fullstendig fylt ut. F.eks. når det står et fylkesnavn bare på første linje med data for dette fylket. Syntaks: Anførselstegn rundt, komma (ikke blank) imellom. “GEO”, “ALDER”\n- RESHAPEid (OBS: Se nedenfor hvis dobbel Reshape!): De dimensjonskolonnene som utgjør ID, og som allerede er på long-format. Skriv de «ferdige» navnene (GEO osv.) Syntaks: Som FYLLTAB. OBS: Legg også inn «VAL2» (bokstavelig, altså ikke det faktiske inndatavariabelnavnet) hvis den allerede er på Long.\n- RESHAPEmeas: Hvis det er flere verdikolonner som skal bli til én, men der de opprinnelige kolonnetitlene er meningsbærende og skal bli til en ny dimensjon. Skriv de faktiske variabelnavnene i innfilen (de blir kategorier), og rams opp alle som skal bli til én kolonne. Double quotes, og komma. (Prøvde å skille mellom to targetkolonner med semikolon, men det gir kræsj og feilmelding “unexpected ‘;’”.)\nEks: “avekt_u1500”,“avekt_u2500”,“avekt_o4500”.\n\nDersom det ikke er spesifisert noe her, vil Reshape ta alle variabler/kolonner som ikke er nevnt i de andre feltene på denne raden, og reshape dem til én.\n\n- RESHAPEvar: Dimensjoner som SKAL reshapes – hva de(n) ferdige kolonnen(e) skal hete, hvor de ovennevnte kategoriene skal være verdiene. Eks: FVEKTKATEGORI.\n- RESHAPEval: Hva ferdige verdikolonner skal hete. Eks: ANTALL. (Trenger ikke quotes)\n- GEO, AAR, KJONN, ALDER: Hva denne kolonnen heter i inndatafilen. Har den ikke noe kolonnehode, skrives bokstaven for Excelkolonnen. Hvis kolonnen først oppstår etter Reshape, skriv navnet på den ferdige kolonnen (samme som i ReshapeVar ovenfor). Også hvis kolonnen lages i RSYNT1, skriv navnet på ferdig kolonne.\nDersom kolonnen ikke finnes, og ikke trengs: skriv bindestrek - .\nDersom GEO mangler (dvs. for en fil med landstall): Skriv &lt;0&gt; . Da gis alle rader landskoden, 0.\nDersom AAR mangler: Skriv &lt;$y&gt; . Da hentes dataårgangen for denne ORGfila fra feltet DEFAAR i tabell ORIGINALFILER (som m.a.o. må fylles ut).\n\nDette er inndata til Rename: Rett før Reshape renames alle variabler som har originalnavn angitt på denne raden, til standardnavnene (VAL1 osv). Så Reshapes, og da oppstår jo noen nye variabler, som vi har sagt i RESHAPEval at skal hete &lt;noe&gt;. Så går det en ny runde Rename, der de nyopprettede variablene endres fra «våre» navn til standardnavnene. De endelige utfil-navnene settes på helt til slutt.\nOBS FOR GEOKODER: Tenk på Soner (se nedenfor)\nKODE &lt;0&gt; :\n\n- GEOd2: Hvis det f.eks. er to nivåer, så denne kolonnen må være med for å gi entydig Geo. Kolonnenavnet i inndatafilen.\n- UTDANN, SIVST, LANDBAK: Hvis disse ikke fins i filen, skriv « &lt;ALLE&gt; ».\n- TAB1 -2 -3: Dimensjoner som skal være med i tillegg til de ovennevnte.\n\n- Hvis variabelen fins i inndatafilen og ikke skal reshapes, skriv variabelnavnet derfra.\n- Hvis den oppstår ved Reshape, skriv hva ferdig reshapet kolonne skal hete (som for GEO osv. ovenfor).\n- Hvis den skal opprettes, og fylles med en standardverdi: skriv verdien slik: &lt;verdi&gt;\n\n- VAL1 -2 -3: Verdikolonnene. Som for TAB-kolonnene.\n- GRUNNKRETS: IKKE I BRUK LENGER. (Sett lik 1 hvis det er grunnkretskoder i GEO, og disse skal håndteres av kommandoen LagFilgruppe).\n- SONER: Se nedenfor.\n- SKALA_VAL1 (_VAL2, _VAL3): Dersom en VAL-kolonne leses inn med feil størrelsesorden (f.eks. at «prosent» ikke tolkes riktig). Innleste tall multipliseres med den faktoren som legges inn her. (Ny des-2019)\nFeltene lengre til høyre ble ikke forklart i første gjennomgang.\n\n\nSoner:\n\nI noen tilfeller må vi hjelpe Geo-dekodingen: (Vet ikke om dette er relevant for NH/fylkesnivå)\nDersom data er levert slik at for de byene der det er bydeler, så får vi bare bydelene og ikke selve kommunetallet, mens for andre kommuner får vi kommunetallet:\n(Det vil si at summen av alle geo blir landstallet)\n- Da må vi kalle geo-kodene for Soner. Og det innebærer å legge inn i feltet INNLESING/SONER (ikke i StyrFILGRUPPER-bildet!) hvor lange geokoder som skal gjøres om til (eller behandles som) sonekoder.\nDet er tre tilfeller:\n\n\n\n\n\n\n\n\n\nAlle kommuner,\nPLUSS bydeler:\nBare bydeler for de\naktuellekommunene,\nvanlig koding:\nNoen har seks\nsifre hele veien:\n\n\n\n\n0104\n0104\n010400\n\n\n0214\n0214\n021400\n\n\n0301 (NB!)\n\n\n\n\n030101\n030101\n030101\n\n\n030102\n030102\n030102\n\n\n0402\n0402\n040200\n\n\n= IKKE soner.\nSkriv ingen ting i SONER-feltet.\nDa vet systemet (by default) at\n4 siffer =K, 6 siffer=B.\n= SONER.\nAngis som «4,6».\n=SONER.\nAngis som «6».\n\n\n\n\n\nGrunnkretser (IKKE I BRUK LENGER etter at Rådataløypa overtok håndtering av grunnkretskodete filer, 2022):\n\nGrunnkretser har ikke hierarkisk koding som samsvarer med bydelene. De fire sifferne bak kommunenummeret er selve GK, og må oversettes til bydelsnummer via en egen tabell. Derfor må vi si fra til systemet at kodene er GK, ved å sette “1” i feltet INNLESING/ GRUNNKRETS.\n\n\n\nAndre kommuner enn bydels-byene (IKKE I BRUK LENGER, se forrige avsnitt):\n\nGrunnkrets er egentlig irrelevant. Alt bak kommunenummeret klippes av, og data aggregeres til kommuneverdiene, uten noen egen styring/kodebok/tabell. Feltet GRUNNKRETS må settes til 1.\nTestet ifm. MFR Keisersnitt-NH: ORGdata hadde kun grunnkretser – inkl. “ukjent kommune”, “kjent kommune, men Missing grunnkrets”, og “kjent kommune, men ukjent grunnkrets”. Da ble tall med kjent kommune tatt med i aggregeringen på fylkesnivå, uavhengig av hva som sto for GK. De med ukjent kommune ble med i landstallet.\n\n\n\nTrengs Reshape av to ting samtidig?\nDet må gjøres i to trinn (OG DET FIKK JEG IKKE TIL Å FUNGERE):\n- Innlesing: Reshaper til bare én tallkolonne, med en TAB-kolonne som har dobbelt sett kategorier. (ELLER må det være to TAB-kolonner, en for hvert sett?)\n- Kubeprod: Bruker det ene settet verdier i (ELLER den ene?) TAB-kolonnen til å opprette en ny tallkolonne med de ønskede verdiene, og setter et filfilter som deretter kaster de nå overflødige radene fra TAB2.\n\nEksempel:\nInndata:\nÅr – Geo – Kjønn – Teller_500 – Teller_1000 – Nevner_500 – Nevner_1000\nBehovet er altså å lage en kolonne Teller og en Nevner, fordelt på TAB-kolonnen med -500 og -1000.\nInnlesing:\nReshape alle fire til én tallkolonne. Hvis det bare er disse fire (som i eksemplet), kan RESHAPEmeas stå tom. Det dannes en TAB1 med fire kategorier: T_500, T_1000, N_500, N_1000.\nSE NEDENFOR om videre spec.\n(ANM: Det ovenstående fungerte, dvs. laget én tallkolonne og én TAB-kolonne. Men i den videre prosesseringen klarte jeg ikke å få ut riktige tall.)\n\n\n\nInnlesingsargumenter (INNLESARG), syntaks:\nSkrives uten mellomrom, adskilt av komma.\nMarie og Nora pleier å shoppe funksjoner ved å se på tidligere innlesingsspec’er. Samtlige innlesingsspec’er er listet opp i tabellen LAG FILGRUPPE – MÅ BRUKE\\INNLESING.\n\nEksempler:\nskip=n Hopp over n rader øverst i inndatafilen.\nsep=“,” Filen er kommaseparert.\nslettRader=n Etter innlesing, slett denne/disse radene. Radnummer som i original fil (uten hensyn til Skip).\nTomRadSlutt=TRUE Gjør at inndataene kuttes ved første tomme rad. Hjelper f.eks. mot SSBs kommentarer nederst i filen.\nheader=FALSE Hvis øverste rad (f.eks. etter skip) ikke inneholder var-navn, og dermed ikke skal slettes.\nencoding=”latin1” For filgrupper som ikke har gått gjennom orgdata må det spesifiseres at CSV-filene skal leses med denne encodingen.\n\n\n\nHvis samme inndatafil skal brukes i flere filgrupper (eller flere innlesingsspec’er):\nSystemet nekter i den vanlige prosessen, så vi må sette opp dette i en bakgrunnstabell.\nGå i LAG FILGRUPPE – KAN BRUKE\\ORGINNLESkobl – tabellen over koblingene mellom innfiler, spec og filgruppe.\nSkriv inn inndatafilens eksisterende FILID på ny rad, sammen med (det nye) filgruppenavnet og DELID. FILID finnes sikrest i (query/tabell)ORIGINALFILERse.\n(DELID kan være det samme som før, men dette vil ikke automatisk kopiere innlesingsspec’en til den nye filgruppen.)\nKlikk Oppdater Alt i skjemavinduet, så dukker filen opp i Tabell 1!\nFor å få brukt innlesingsspec’en om igjen:\nGå i LAG FILGRUPPE – MÅ BRUKE\\INNLESING og kopier spec’en til ny rad. Skriv inn det nye filgruppenavnet, og evt. ny DELID (men den kan være den samme som før. DELID er bare unike innen hver filgruppe).\n\n\nTriks for å kopiere mange spec’er:\nVed innliming av fire kopierte spec’er i tabell INNLESING protesterte Access, «dubletter i et nøkkelfelt» eller noe sånt. De kopierte radene ble automatisk limt inn i en nyopprettet tabell «Innlimingsfeil», og Access sa «Rett opp feilene der, og kopier derfra til target-tabellen». Da fikk jeg skrevet inn nye verdier i alle fire, og kopierte fra «Innlimingsfeil» til INNLESING. Det ble godtatt.\n\n\nBruk av RSYNT- (Statasynt-) punkter:\nSe oversikt over aktive punkter i [\\\\fhi.no\\Felles\\Forskningsprosjekter\\PDB 2455 - Helseprofiler og til_\\PRODUKSJON\\DOK\\Oversikt over alle RSYNT-punkter.docx]",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#kjør-innlesing-med-disse-parameterne-bruk-rstudio-se-nedenfor",
    "href": "produksjon/khfunctions-access.html#kjør-innlesing-med-disse-parameterne-bruk-rstudio-se-nedenfor",
    "title": "KHELSA.mdb",
    "section": "Kjør innlesing med disse parameterne: (Bruk RStudio, se nedenfor)",
    "text": "Kjør innlesing med disse parameterne: (Bruk RStudio, se nedenfor)\nIkke i bruk lenger:\n\nDOBBELTKLIKK (NB!) «Lag stablet fil»-knappen. OBS: Egen knapp for 64-bits Access. Disse knappene er Visual Basic, som Kåre ikke kan. R-versjon er hardkodet – det er en del av path til programmet. Oppdatert sep-17 til vår “frosne” R på Kommunehelsa-disken. Hvis knappen ikke virker, funker det å kjøre direkte i R. Da kan jeg også se evt. feilmeldinger.\n\n\nI RStudio:\nÅpne R-prosjekt «khfunctions». Det må være satt opp på forhånd, se egen bruksanvisning …\nFra H-2022: Når R-prosjektet lastes, blir nødvendige oppdateringer av R-pakker kjørt automatisk, og nyeste utgave av produksjonsscriptet sources direkte fra Github.\nÅpne F:\\PDB 2455 - Helseprofiler og til_\\PRODUKSJON\\BIN\\ SePaaFil.r\nTrengs ikke lenger: (#NB: Alle kommandoer under krever at linja under kjøres en gang ved oppstart)\n\nsource(‘KHfunctions.r’)\n\nHvis du får feilmelding: «.…. first argument is not an open RODBC channel» må også denne kjøres som oppstart:\n\nKHglobs&lt;-SettGlobs()\n\n\nKommandoer:(De fleste ligger i scriptet)\nFG&lt;-LagFilgruppe(“ENEFHIB”,versjonert=TRUE) lager versjonert stablaorg (“stablet fil”). Her er det foreløpig ikke gjort noen beregninger, det følger i neste trinn.\nDenne lagres bare som R-datafil, uten noen csv-kopi, men det kan endres hvis vi vil.\nK&lt;-LagKubeDatertCsv(c(“NPRKOLS”,“NPRPSYK”,“NPRSOMAT”,“KREFT”)) lager datert kube, med kopi i CSV (og datert Friskvik) for alle på lista i parentesen i kommandoen.\n\n\nRuntime dump av datasettet:\nEnkeltfiler eller stablet fil (avh.av hvilket dumppunkt vi ber om) dumpes ut fra minnet til en lagret fil på …\\PRODUKSJON\\RUNTIMEDUMP\\. Enkeltfiler vil ha et løpnummer som skiller dem fra hverandre, mens etter stabling heter filene bare &lt;filgruppenavnet&gt;&lt;dumppunktnavnet&gt;.\nMulige punkter: [\\\\fhi.no\\Felles\\Prosjekter\\Kommunehelsa\\PRODUKSJON\\DOK\\DUMPPUNKTER.docx]\n1) Sett “dumps” til hvilke punkter og hvilken utfil-type du vil ha.\n2) Kjør LagFilgruppe med “dumps”-delen av kommandoen inkludert.\nEksempel:\n\ndumps=list() #-&gt; Ingen dump\ndumps=list(maKUBE0=“CSV”,RSYNT2pre=c(“CSV”,“STATA”))\nFG&lt;-LagFilgruppe(“KEISERSNITT_NH”,versjonert=TRUE,dumps=dumps)\n\n\n\nSjekk resultatet: Skjema LOGGskjema\n\n\nDette skjemaet viser dumper og analyser av innlesingen på flere trinn i prosessen, og eventuelle feilmeldinger. Slik er det lett å se på hvilket trinn noe skar seg.\n\nØverst er en oppsummering: Etter litt basisinfo om inndatafilen kommer raden som starter med «INNLES_OK». Alle feltene i denne raden skal ha verdien 1 (eller blank, hvis f.eks. den aktuelle variabelen ikke fins).\nINNLESh viser filen slik den ser ut rett etter rå innlesing. (Det hender at dette er tomt)\nmodINNLESh viser filen etter «skip» og «slettRader» o.l. helt enkle regler.\nRESHAPEh viser rett etter reshape.\nFINALh viser sluttresultatet, etter at År og Alder er splittet til «lav» og «høy» og vises som intervaller, det er lagt til en kolonne med FYLKE, og hver VAL-kolonne har fått to flagg:\na. «VAL1.f» er årsaken til at det står «NA» dvs. Missing som verdi. Denne tilsvarer (og blir til) SPVflagg.\nb. «VAL1.a» er antallet rader som er kollapset for å gi tallet i denne raden. Intern QA-variabel.\n\nInnimellom de nevnte tingene er det felter med feilmeldinger fra R, inndelt etter hvor de oppsto.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#a.-faste-koder-endres-ikke.",
    "href": "produksjon/khfunctions-access.html#a.-faste-koder-endres-ikke.",
    "title": "KHELSA.mdb",
    "section": "5a. Faste koder: Endres ikke.",
    "text": "5a. Faste koder: Endres ikke.\nTabell: KH_KODER.\nHer er en del faste koder for standarddimensjonene definert. De stemmer for det meste med leveransene, men noen ganger matcher ikke inndata denne kodingen. I så fall legger vi inn omkoding fra inndataverdien til KH_KODER-verdien i tabell KODEBOK (se nedenfor).\n\nFelter:\n\n\n\n\n\n\n\n\nDEL\n(som betyr)\nKODE, LABEL\n\n\n\n\nA\nAlder\n888_888 Ugyldig, 999_999 Ukjent\n\n\nGn\nGeonivå\nL land, H Hreg, F fylke, K kommune,\nB bydel, S sone, G grunnkrets, U ugyldig.\n\n\nK\nKjønn\n0 kjønn samlet, 1 menn, 2 kvinner,\n8 ugyldig, 9 ukjent.\n\n\nL\nLandbakgrunn\n(se kodeliste nederst i filen)\n\n\nS\nSivilstand\n(se kodeliste nederst i filen)\n\n\nU\nUtdanning\n(se kodeliste nederst i filen)",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#b.-kodebok",
    "href": "produksjon/khfunctions-access.html#b.-kodebok",
    "title": "KHELSA.mdb",
    "section": "5b. Kodebok:",
    "text": "5b. Kodebok:\nVenstremeny i Access: Avsnitt LAG FILGRUPPE – KAN BRUKE.\nDet hender filene inneholder verdier som ikke er selvforklarende, og som må spesifiseres. Ulike varianter av blanke, missing osv., non-standard eller skiftende Geokoder, stringverdier med store vs. små bokstaver i ulike årganger …\nOBS: Koding av VALn missing -&gt; ‘noe annet’ : Se også felt FILGRUPPE/VAL1miss .\n\nLegge inn ny kode: Tabell KODEBOK\n- Identifiser FILGRUPPE, DELID og FELTTYPE (dvs. variabelnavn) koden gjelder for. OBS: Her brukes standardnavnene, dvs. TAB1 etc.\n- DELID kan oppgis til FELLES. Da gjelder denne raden for alle DELID innen samme FILGRUPPE. Men IKKE sett FELLES hvis det fins flere varianter av samme inn-kode (dvs. som skal bli til én ut-kode). Det kan se ut som en FELLES gjør at andre varianter ikke slår inn?\n- Default TYPE er «KB». Noen steder står det «SUB», og da gjøres omkodingen med Regular Expressions, ikke bare ved å bytte ut en fast string. Dersom hele strengen skal omkodes, brukes «KB», men dersom deler av en/flere strenger skal omkodes, brukes «SUB».\n- ORGKODE er koden i inndatafil.\n- NYKODE er hva den skal kodes om til.\n\nRegular expressions: Litt ulikt Stata.\n- Det er akkurat det som matcher, som byttes ut. Må lage en RE som matcher hele stringen for å få erstattet hele.\n- Symboler eller koder for klasser av tegn: \\d digit, \\s space (inkl. space, tab, newline osv.), og stor bokstav \\D og \\S betyr «alt som IKKE er» hhv. digit og space.\n- Antallsoperator: Det foregående uttrykket matches et antall ganger: {n} nøyaktig n ganger, {n, } n eller flere ganger, {n,m} minst n men max m ganger. Så \\d{2} matcher to siffer.\n- Erstatt med et av sub-uttrykkene (Stata: regexs(2) ): \\n der n er 1-9. Matcher parentes nummer n i det komplette RE. (Brukes f.eks. i «NYKODE»-kolonnen)\n\n\n\nSjekke hvordan det gikk: Tabell KODEBOK_LOGG_se\n(i avsnitt LAG FILGRUPPE – MÅ BRUKE)\n(OBS: Kjempetabell, det tar mange sekunder å åpne den og filtrere den. Selv det å åpne filter-nedtrekksmenyen tar et par minutter første gang. Vær litt tålmodig.)\nHer finner du igjen Filgruppe, Delid, Felttype.\n- ORG er koden i inndata.\n- KBOMK er koden den skulle kodes til.\n- OMK er koden den faktisk ble omkodet til.\n- OK flagger de radene der dette ikke stemmer overens (=0), så man kan filtrere fram disse.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#spesielle-triks-osv",
    "href": "produksjon/khfunctions-access.html#spesielle-triks-osv",
    "title": "KHELSA.mdb",
    "section": "SPESIELLE TRIKS OSV",
    "text": "SPESIELLE TRIKS OSV\n\nGjenbruke en innlesingsspec: Samme innfil i to filgrupper\nDet går an, men er litt plundrete. Systemet nekter å bruke samme filnavn om igjen.\n\nLes FILID fra ORIGINALFILER.\nGå i ORGINNLESkobl og finn FILID-nummeret der.\nDer kan jeg nå skrive inn samme Filid og kopiere resten. Det vil bli en ny KOBLID, og vi skriver altså ny FILGRUPPE.\n\nOBS: DELID kan ikke kopieres her – det er ikke entydige navn.\n\nGå i Hovedstyring/INNLESING og kopiér innlesingsspec’en. Skriv inn den nye Filgruppen, og evt. nytt Delid (kan hete det samme).\n\n\n\nBegrense tidsserien i én ORGfil, når to ORGfiler har overlappende data: Bruk KODEBOK\nEksempel: ORGfiler til ABORT_NH i 2021.\n\nForrige leveranse dekket hele tidsserien 1979-2019.\nNyeste leveranse har 2016-2020.\n\nDa bruker vi alle årgangene i nyeste fil, for å få med oppdateringer i registeret. De overlappende årene i eldste fil må tas ut før de to filene stables til filgruppe.\n\nSørg for at de to filene har hver sin DELID.\nSett i KODEBOK, på DELID for eldste fil: I variabel AAR skal 2016 (og 2017 osv) kodes til “-” (strek). Da slettes disse årene i innlesingen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#b---eventuelt-tabell-filfiltre",
    "href": "produksjon/khfunctions-access.html#b---eventuelt-tabell-filfiltre",
    "title": "KHELSA.mdb",
    "section": "1 b - Eventuelt: Tabell FILFILTRE",
    "text": "1 b - Eventuelt: Tabell FILFILTRE\nInneholder enda flere mekanismer for å lage teller/nevner under kjøringen. Brukes f.eks. der middelfolkemengde er nevner.\nDenne er ikke dokumentert fra starten av, så etter at Kåre forsvant ut, baserer bruken seg på erfaring og prøving-og-feiling …\nFILVERSJON Vi lager et navn. Dette brukes i tabell TNP_PROD som TELLERFIL eller NEVNERFIL.\nORGFIL Filgruppenavnet.\n\n\nTabell KUBER\n\n\nDefinerer hva som skal beregnes og hvordan utdataene skal se ut.\nInneholder felter både for ren R-løypebehandling og for direktestandardisering i Stata (for NH-indikatorer). Stata har noen helt egne felter, men bruker også mange av de vanlige. Der syntaks i feltet er ulik for R- og Statabehandling, er det angitt:\n\nFelter:\nKUBE_NAVN Vi lager et utfilnavn.\nMODUS NH eller KH. Styrer hvor utfiler havner.\nTNP Skriv TNP_NAVN fra forrige tabell.\nStata_dropp Feltet er utdatert (nov-2018).\n\nStyres nå ved å oppgi kubenavn i dialogen for start av statascript Direktestandardisering (gjelder bare NH).\nSTANDARDISERING I STATA: “1” hvis denne skal utelates fra kjøringen. Trenger bare fylles ut hvis REFVERDI_VP er lik ‘D’.\n\nAAR_START Default 0. Legges inn for å begrense hvilke årganger som blir med.\nAAR_STOP Default 9999. Ditto. Siste år som inkluderes.\nOBS: Man må enten bruke disse to, eller “AAR” nedenfor. Hvis det står noe i AAR, virker ikke AAR_STOP.\nAAR Enkeltår som skal tas ut! Syntaks: -[2006,2007]. MFR: -[0]\nGEOniv Hvilke som skal kjøres ut. B, K, F, H, L.\nKJONN Ditto.\nKJONN_0 Er kategorier som skal brukes senere i prosessen, men som ikke skal vises i kuben. Det kan f.eks. være at vi vil vise andel «høy» av noe og at nevneren skal være «høy» + «lav», da må «lav» også være med litt videre selv om vi ikke vil vise det i kuben. (Skriv inn alle felter som inngår i senere beregning, også de som skal vises ut.) Det gjelder alle kolonnene som slutter på «_0».\nALDER Som KJONN. Tom -&gt; alt som ligger i fila. «ALLE» -&gt; bare aldersgruppen ALLE, som er definert annet sted. Ellers: Må spesifisere alle grupper som skal vises i kuben.\n… OBS: En PRE-fil for direktestandardisering (Norgeshelsa, se nedenfor) kan ikke inneholde overlappende aldersgrupper (f.eks. 0-4 og 0-19), den må bare ha de gruppene som skal brukes i standardiseringen (som regel streite 5-årsgrupper 0-4, 5-9 osv.).\n(TAB1formel -2 -3 Finnes ikke i løypescriptet)\nTAB1 -2 -3 Tom -&gt; alt som ligger i fila. Ellers: Spesifiserer hvilke kategorier fra hver TAB som skal være med, adskilt med komma.\nKan angi kategorier som skal droppes i R-løypa: -[R03]\nSYNTAKS FOR STATA: AARSAK~keep~SELVMORD - kan angi keep eller drop.\nTAB1_0 etc. Se «KJONN_0» ovenfor.\nRATESKALA Bestemmer om rate blir per 100, per 1000 osv.\nMOVAV Bestemmer lengden på glidende snitt-perioden.\nREFVERDI_VP Bestemmer standardisering. P -&gt; Indirekte standardisering (for KH), D -&gt; Direkte standardisering (for NH), V -&gt; ingen std.\nREFVERDI Hvilket geonivå som er ref. OBS ulik syntaks:\n\nFor KH: Alltid landet i hht. nåvær.beslutning. GEOniv==‘L’\nFor NH: bef1jan2012\n\nNESSTARTUPPEL Hvilke måltall som skal være med. OBS ulik syntaks:\n\nFor R-løypa: T teller (rå antall), N nevner, RATE (ikke-std.), MEIS (std.rate), SMR (Norge=100, kan være med selv om ikke std.tall), MT måltall, SN sum nevner, ST sum teller, RN Rate.n (antall år det aktuelle tallet er gj.snitt av – blir lavere enn MOVAV hvis en kommune mangler tall for ett eller flere av årene i perioden).\nFor Stata: antall, crude, std, smr,nevner.\n\nEKSTRAVAR For eksempel Dekningsgrad.\nDIMDROPP Hvilke dimensjoner skal droppes. UTD, LANDBAK, SIVSTAND, evt KJONN er typisk.\nPRIKK_T Prikkeregler. Dette antallet eller lavere prikkes. (TELLER)\nPRIKK_N Ditto. (NEVNER)\nSTATTOL_T Grense for å skjule serier. «Hvis mer enn 50 % av punktene er basert på &lt;dette tallet&gt; eller færre tilfeller, skjules hele serien». (OBS: Feil formulert i metadata fram til feb-2016: “færre enn &lt;dette tallet&gt;”.)\nOVERKAT_ANO For R-løypa: Hvilken kategori skal bevares ved naboprikking. «KJONN=1» gjør at Kvinner og Samlet prikkes.\nErfaring: Hvis det skal naboprikkes etter en ekstradimensjon (f.eks. INNVKAT, UTDANN), må var-navnet stå her (med angivelse av overgruppe).\nFor Stata: Styres i Stata_nabopr.…\nVERSJONFRA\nVERSJONTIL Kan brukes til å hindre at en kube kjøres ut, ved å sette «til»-dato før dagens.\n(ANM: Jeg fikk ikke til å lage en ny linje her med samme kubenavn, selv om jeg satte «til»-dato på den gamle og «fra»-dato på den nye, og hadde forskjell i «nesstartuppel»-feltet. Måtte ha avvikende kubenavn for at linja skulle bli godtatt.)\nSLUTTREDIGER RSYNT-punkt, kan legge inn Statakode. (Ligger ikke helt til slutt i løypa, det skjer flere ting etter dette punktet).\nRSYNT_POSTPROSESS RSYNT-punkt like før ferdig kube lagres. OBS: Variabler i datasettet er fremdeles inkludert hjelpevariabler.\nFHP_geoniv I hvilke FHP brukes kuben? (B, K, F). Kun til info.\n\n\nFylles ut når kuben skal direktestandardiseres i Stata (brukes i NH):\nStata_spesdim Navnet på spesialdimensjonen, f.eks. diagnose, dødsårsak el.l.\nStata_KJONN Oppgi alle grupper, også såkalte implisitte undergrupper som ikke skal vises i kubene (de som skal vises angis i KJONN).\nStata_ALDER Oppgi alle grupper, også såkalte implisitte undergrupper som ikke skal vises i kubene (de som skal vises angis i ALDER). Eks.: Hvis 0-120 og 45+ skal vises, er 0-44 implisitt, og må oppgis her.\nStata_TAB1 De verdiene av spesialdimensjonen som ønskes vist i kubene. Også verdier som må lages. Syntaks: Se nedenfor\nStata_ford Statistisk fordeling: “binomial” eller “poisson”\nStata_antall Hvilke Geonivå skal ha Antall - Tillatt er L, H, F, kombinasjoner av disse (uten skilletegn), eller tomt felt (som gir antall på alle nivå). Så lenge vi ikke naboprikker på GEO, bør kanskje antall begrenses til ‘L’.\nStata_naboprKjonn Rekkefølge for bevaring av nabokategorier, Kjønn.\n\nKJONN~niva1{0,1,2 }.\nAvansert syntaks: Kan angi avvikende rekkefølge ved angitte vilkår. KJONN~niva1{0,1,2 (2,0,1_if_ICD==C50)(2,0,1_if_ICD==C53) (1,0,2_if_ICD==C61)}\n\nStata_naboprAlder Rekkefølge for bevaring av nabokategorier, Aldersgrupper. Alle gruppene (“trekantene” i prikkelogikken) må oppgis. Komplekst eksempel (Reseptreg.):\n\nALDER~niva1{0_74,0_79,75_79}niva1{20_79,0_79,0_19}niva2{0_74,45_74,0_44}niva2{0_14,0_19,15_19}niva3{0_44,25_44,15_24,0_14}niva4{15_24,15_19,20_24}. Hele rekkefølgen har betydning når flere enn tre kategorier (se nedenfor).\n\nStata_naboprSpes Rekkefølge for bevaring av nabokategorier, (se de foregående). NB, hele rekkefølgen har betydning. I eksempelet “INNVKAT~{0,2, 3,20 }” har «0» høyest prioritet, og «20» har lavest.\n\n\nSyntaks for Stata_TAB1:\nHvis man bare ønsker et sub-sett av verdiene i en spesialdimensjon, eller man ønsker å avlede en ny verdi fra de eksisterende, angis dette i denne kolonnen.\n\nAngi ønskede verdier av spesialdimensjonen(e) slik:\n\nspesialdimnavn~verdi. Eksempel: TRINN~10\n\nDersom flere verdier, skill med komma, ingen mellomrom. Eksempel: TRINN~10,8\nDersom flere spesialdimensjoner, skill med # . Ingen mellomrom. Eksempel: SPRSMLID~307#TRINN~10\nDersom ny aggregert verdi (f.x. i tillegg til de eksisterende): Listes opp sammen med de andre verdiene, men etterfulgt av “=” og deretter angivelse av hvilke eksisterende verdier det skal aggregeres fra (skilt med “&”) og så “@” og angivelse av hvordan teller (T) og nevner (N) skal aggregeres. Tenk nøye gjennom sistnevnte!\n\nEksempel på syntaks der man ønsket ny verdi, Vdg_tot, for alle som har mer enn grunnskole (eksempel hentet fra 2014-filen):\n“Vdg_tot=Uni_Høg_kort&Uni_Høg_lang&Videregående\\@sumT_meanN”\n\nMulige aggregeringsmetoder: sum, mean.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#hvis-indikatoren-skal-vises-i-barometeret-tabell-friskvik",
    "href": "produksjon/khfunctions-access.html#hvis-indikatoren-skal-vises-i-barometeret-tabell-friskvik",
    "title": "KHELSA.mdb",
    "section": "HVIS INDIKATOREN SKAL VISES I BAROMETERET: Tabell FRISKVIK",
    "text": "HVIS INDIKATOREN SKAL VISES I BAROMETERET: Tabell FRISKVIK\nHer er parametre for å lage tabellen s.4 og barometerfigurene: både styre hva R-løypa skal slice ut til å vises, og hvordan Statascript skal gjøre beregningene for å produsere dem. Her angis også om indikatoren skal ha setning på side 1.\nNy, separat rad for hver indikator/geonivå/årgang.\nOBS: Stata direktestandardiseringsscript (for NH) sjekker alltid om aktuell kube (KUBE_NAVN) ligger i tab FRISKVIK med AARGANG==inneværende profilårgang og MODUS==“F”. I så fall må hele raden være utfylt, og det slices ut en Friskvikfil.\n\nFeltene:\nINDIKATOR gi den et navn.\nMODUS dss. geonivå, F K B\nAARGANG profilårgang\nFILNAVN\nKUBE_NAVN Kuben tallene tas fra\nAARh Hvilken årgang data skal vises\nKJONN Hvilket kjønn skal vises\nALDER Hvilken aldersgruppe skal vises (hvis fila har fler).\n\n[mars-22: tom celle, eller “-”, for en fil med flere ald.grp -&gt; alder 0 ble valgt\n(Indikatorer e0K_NH_LF og e0M…).]\n\nEKSTRA_TAB Hvilken verdi fra en ekstradimensjon skal vises. F.eks.: ANTALL_GANGER==‘engangellerflere’ & SOES==‘0’.\nHer er ANTALL_GANGER TAB1 og SOES TAB2.\nUTDANN (tilsv.)\nSIVST (tilsv.)\nLANDBAK (tilsv.)\nALTERNATIV_MALTALL Hvis noe annet enn &lt;&gt; skal brukes. Eks. DEKNINGSGRAD for indikatoren Drikkevann/dekningsgrad.\n(De følgende trenger ikke fylles ut ved kubekjøring – de brukes av Stata i flatfil- og barometerproduksjonen)\nKOMMENTAR\ntema_bm Under hvilken temaoverskrift i tabellen?\ntema_nn (tilsv.)\ntemaid Denne temaoverskriftens nummer\nLNRtabells4 Radnummer i tabellen side 4\nekstrafil_loep Dette er en lite brukt parameter, men behøves dersom man har en kombinasjon av\na) indirekte standardisering, og\nb) fast referanseår\n\nFrem til januar 2019 har dette kun gjelt RFU-tall, fylkesprofiler.\nForklaring: Alle statistiske tester, både av bydels-, kommune- og fylkestall, skal være mot landstall samme år.\nVed indirekte standardisering (se pkt. a) betyr dette at det trengs «predteller»1 basert på de aldersspesifikke ratene på landsnivå samme år. Siden de ordinære Friskvikfilene for fylkesprofiler kjøres ut med fast referanse-år (2012), vil alle predtellere i disse filene være basert på de aldersspesifikke ratene på landsnivå i 2012, hvilket ikke er det som trengs. Situasjonen krever at det kjøres ut ekstra filer med løpende standardisering. Altså: Riktig MEIS2 må komme fra de ordinære filene standardisert mot fast standard-år (for at MEIS i profilene skal stemme med MEIS i statistikkbanken), mens rett predteller (og følgelig Forholdstall og figurverdier) må komme fra ekstrafilene standardisert mot løpende standard-år.\nI praksis: Man lager som regel ordinær fil og ekstrafil ved å spesifisere henholdsvis\n«GEOniv==‘L’ & AARl==‘2012’», og\n«GEOniv==‘L’»\ni parameteren REFVERDI i tabellen KUBER . Navnet man gir ekstrafilen må slutte på «_L» (som i Løpende), f.eks. ROYK_NH_5_16_44_L. Det er navnet på ekstrafilen som skal inn i dette feltet (ekstrafil_loep).\n\nvarname_bm Indikatornavn i tabellen\nvarname_nn (tilsv.)\nSide_1 Skal indikatoren ha setning side 1? (avkrysningsboks) - krever at også neste er krysset av.\nSide_4 Skal indikatoren være med på side 4? (avkrysningsboks) - Her kan man ta ut igjen en indikator som likevel ikke skal være med, uten å måtte slette all info.\nEnhet Tekst til kolonnen Enhet i tabellen.\nperiode_bm Beskriver dataenes tidsperiode til fotnote s.4\nperiode_nn (tilsv.)\nkreftkorr Korrigering for at teller og nevner allerede var periodesummer fra leverandør (se Kreftreg.) og likevel er blitt ganget opp med antall år i perioden i R-løypen. Eksempel: Dagens (2018) praksis er at Kreftregisteret leverer grunnlagstall i form av 10årige glidende summer av teller og nevner. Anta at dette i vår preprosessering er blitt tolket som ettårige tall, og derfor (feilaktig) ganget opp teller og nevner med 10. Da kan man korrigere dette ved å dividere igjen med 10, ved å skrive «10» i &lt;kreftkorr&gt;. Skriver man «1» eller ingenting, så skjer det ikke noen korreksjon.\nekskluderteAar\nFN_alder Beskriver dataenes aldersgruppe til fotnote s.4\nforklaring_bm Beskriver dataene, til fotnote s.4\nforklaring_nn (tilsv.)\nSammeFotnSom Angi LNRtabells4 for indikatorer som skal ha samme fotnote\ntesttype Hvilken statistisk test? Chiang, binomial, poisson, ELLER kommentar om at testtype er hardkodet i scriptet.\nfeilvei Sett JA hvis x-aksen i barometeret skal snus så små verdier vises som “bedre”. Ellers sett NEI.\nskalaforskyv\nfargetPrikk Sett JA hvis barometersymbolet skal “verdilades” med rød/grønn prikk. Ellers sett NEI for å få hvit prikk med signifikansmerking.\nenFastDesimal JA, NEI, ingenting. Vanligvis: «NEI» eller ingenting. Da vil tall&gt;10 komme uten desimaler, mens tall lavere enn 10 vil få gradvis flere desimaler. Alle tall under 100 får, på denne måten, samme antall «significant digits». Dette er den konvensjonelle måten å presentere tall på. Skriver man «JA» vil alle tall komme med akkurat én desimal.\nfleksSkala JA, NEI, n/a\ntopp10 JA, NEI, n/a\nant_perioder Brukes for Ungdata\nTidsserieURL URL for tidsserie i KH/NH. Tas med i flatfil for opplasting til SQL-databasen. (VAR KUTTET i Develop-tabellen)\n\n\n(Feilmelding ved kjøring:\nNår det kjøres ut en Friskvikfil i R-løypa, kommer en feilmelding:\n\n*KHFEIL!!  FEIL I FRISKVIKFILTER (GEOniv %in% GEOfilter) & ALDER==‘0_120’ & AARh==2017 & KJONN==2 & KMI_KAT==‘Overvekt’ GIR bare 475 / 487 rader!\n\nDenne kan ignoreres: Den skyldes at løypa ble tilpasset antall kommuner+fylker+bydeler+land når det ble utviklet. Nå er dette antallet redusert ved kommunesammenslåinger. )\n\n\nFOR Å KJØRE:\n\n\nGå i Rstudio.\nScript: SePaaFil.r (samme som vi har åpnet før, se 3.)\nKjøres bitvis.\n\n#LAGE EN NY KUBE (datert), med kopi i csv\nK&lt;-LagKubeDatertCsv(“RESEPT_PREstatb_NH”)\n\n(«K&lt;-» -delen gjør at output går til et objekt i stedet for til skjermen. Sparer mye skjermutskrift, og gjør det mulig å se på resultatet i R etterpå.)\n\n\n\nFor å få ut en runtime dump av datasettet:\nSe beskrivelse ovenfor, under Innlesing “3. Kjør innlesing…”\nEksempel:\nk&lt;-LagKubeDatertCsv(“TEST_SESJON1_NH”,dumps=dumps)\n\n\nFor å se på en fil (som i Statas datafilvindu):\nFG&lt;-FinnFilT(“NPR”)\nsubset(FG,AARl==2012 & GEO==“0214” & KJONN==1)\nELLER/OG:\nView(FG) -ja, med stor V.\nKan lage et subset først, da ” utvalg &lt;- subset(FG,.…) ” og View(utvalg)\n\n\nUTFILER HAVNER etter hva som er satt i «Modus» - NH eller KH.\nStår i «ferdig»-meldingen etter en vellykket kjøring i R.\n“F:/Forskningsprosjekter/PDB 2455 - Helseprofiler og til_/PRODUKSJON/\nPRODUKTER/KUBER/NORGESHELSA/DATERT/csv//FODSELSVEKT_NH_2015-06-22-11-37.csv”\n\n\nPROBLEMLØSING/FEILSØKING\n\n\n\n\n\nTa runtimedump:\nDet er ofte nyttig å ta ut runtimedump på ulike steder. Det kan avsløre hvor i prosessen ting går galt, og gi assosiasjoner til hvilken parameter som må endres.\nKommando LagFilgruppe eller LagKube med parameter “dumps”, se i SePaaFil.r. Se liste over punktene i \\\\fhi.no\\Felles\\Forskningsprosjekter\\PDB 2455 - Helseprofiler og til_\\PRODUKSJON\\DOK\\DUMPPUNKTER.docx\n\n\nSkrive selve filgruppen til en CSV-fil, direkte fra R:\nEtter at LagFilgruppe() er kjørt, ligger filgruppen som R-objektet FG. Kan evt. leses fra disken med FG&lt;-FinnFilT(“EIERSTATUS”) .\nEksportkommando (filnavnet trenger ikke eksistere fra før):\nwrite.table(FG, file=’F:\\\\**Forskningsprosjekter\\\\ PDB 2455 - Helseprofiler og til_\\\\PRODUKSJON\\\\RUNTIMEDUMP\\\\EIERSTATUS_FG.csv’, sep=‘;’, na=““, row.names = FALSE)\n\n\nRydde buffer:\nOpplevd: R har en buffer hvor resultat-«filer» lagres for gjenbruk. Ved vellykket kjøring ryddes den til slutt, men ved kræsj skjedde det at feil-outputfila ble liggende der. Ved neste kjøring ble ikke riktig filgruppe lest inn, den gamle med feil ble bare kjørt inn om igjen.\nSjekke bufferen:\n&gt; names(BUFFER) viser hvilke «filer» som ligger der.\nSlette ting:\n&gt; BUFFER$navn &lt;- NULL sletter «navn»\n&gt; BUFFER &lt;- NULL sletter alt. Koster litt tid, for da må BEF_Gka leses inn om igjen\n(når den trengs).\n\n\nFriske opp globale bakgrunnsdata:\n&gt; Khglobs Leser dem inn på nytt.\nMen for å være helt sikker, er det lurt å restarte R helt! Og da uten å lagre workspace …\n\n\nUforklarlig prikking av sammenslåtte Geo?\nSjekk at alle VAL-tallene er satt som “sumbar” i tabell FILGRUPPER. Hvis ikke, kan jo ikke tallet for to gamle kommuner summeres til den nye – og da vil prikkerutinen slette resten av tallene på samme linje.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#interne-koder-for-de-ulike-elementene-kolonnene-i-en-tabell",
    "href": "produksjon/khfunctions-access.html#interne-koder-for-de-ulike-elementene-kolonnene-i-en-tabell",
    "title": "KHELSA.mdb",
    "section": "Interne koder for de ulike elementene (kolonnene) i en tabell:",
    "text": "Interne koder for de ulike elementene (kolonnene) i en tabell:\nGn = Geonivå, Y = År, osv.\nSe tabell KH_DELER",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#landbakgrunn-koder-i-kh_koder",
    "href": "produksjon/khfunctions-access.html#landbakgrunn-koder-i-kh_koder",
    "title": "KHELSA.mdb",
    "section": "Landbakgrunn, koder i KH_KODER:",
    "text": "Landbakgrunn, koder i KH_KODER:\n\n\n\nKODE\nLABEL\n\n\n\n\n0\nALLE\n\n\n1\nEuropa unntatt Tyrkia\n\n\n2\nAfrika\n\n\n3\nAsia med Tyrkia\n\n\n4\nNord- Amerika\n\n\n5\nSør- og Mellom- Amerika\n\n\n6\nOseania\n\n\n7\nStatsløse\n\n\n8\nUoppgitt\n\n\n9\nAndre\n\n\n88\nUgyldig\n\n\n-1\nNorge\n\n\n100\nInnvandrere\n\n\n1B\nEuropa unntatt Tyrkia_innvand\n\n\n1C\nEuropa unntatt Tyrkia_norskf\n\n\n2B\nAfrika_innvand\n\n\n2C\nAfrika_norskf\n\n\n3B\nAsia med Tyrkia_innvand\n\n\n3C\nAsia med Tyrkia_norskf\n\n\n4B\nNord- Amerika_innvand\n\n\n4C\nNord- Amerika_norskf\n\n\n5B\nSør- og Mellom- Amerika_innvand\n\n\n5C\nSør- og Mellom- Amerika_norskf\n\n\n6B\nOseania_innvand\n\n\n6C\nOseania_norskf",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#sivilstand-koder-i-kh_koder",
    "href": "produksjon/khfunctions-access.html#sivilstand-koder-i-kh_koder",
    "title": "KHELSA.mdb",
    "section": "Sivilstand, koder i KH_KODER:",
    "text": "Sivilstand, koder i KH_KODER:\n\n\n\nKODE\nLABEL\n\n\n\n\n0\nALLE\n\n\n1\nUgift\n\n\n2\nGift\n\n\n3\nEnke/ enkemann\n\n\n4\nSkilt/ separert\n\n\n5\nAnnen\n\n\n8\nUgyldig\n\n\n9\nUkjent",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-access.html#utdanning-koder-i-kh_koder",
    "href": "produksjon/khfunctions-access.html#utdanning-koder-i-kh_koder",
    "title": "KHELSA.mdb",
    "section": "Utdanning, koder i KH_KODER:",
    "text": "Utdanning, koder i KH_KODER:\n\n\n\nKODE\nLABEL\n\n\n\n\n0\nALLE\n\n\n1\nGrunnskole\n\n\n2\nVideregående skole\n\n\n3\nUniversitets/ høyskoleutdanning\n\n\n4\nAnnet (ingen/ uoppgitt)\n\n\n8\nUgyldig\n\n\n9\nUkjent\n\n\n23\nVidergåendeOgHøyere\n\n\n123\nOppgitt\n\n\n\n(NB: Her bruker vi ofte 3 = Univ/Høy, kort og 4 = Univ/Høy, lang. )",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "KHELSA.mdb"
    ]
  },
  {
    "objectID": "pakker/qualcontrol.html",
    "href": "pakker/qualcontrol.html",
    "title": "qualcontrol",
    "section": "",
    "text": "Funksjonene i qualcontrol skal i hovedsak bruke funksjoner fra pakkene data.table og collapse.\nBare hovedfunksjoner som inkluderes i brukerfilene skal være eksporterte objekter, mens alle andre funksjoner skal betegnes med roxygen-taggen @keywordsinternal. Små hjelpefunksjoner som ikke trenger utdypende dokumentasjon kan også tagges med @noRd for å ikke generere en hjelpefil.\n\n\n\nVed utvikling av nye funksjoner finner du nyttige koder i mappen dev og filene dev.R (lese inn testfiler), benchmarking.R (sammenligne funksjoner mtp hastighet) og profiling.R (analysere tid- og minnebruk for ulike steg i funksjonen).\n\n\n\nFor å sikre at pakken fungerer som den skal, er målet at så mye som mulig av koden skal være dekket av tester. For å teste pakken bruker du Ctrl + Shift + T. For å sjekke hvor mye av koden som er dekket kan du bruke devtools::test_coverage(), som genererer en rapport som blant annet viser hvor stor andel av funksjonell kode som ikke er dekket av testene. Denne fungerer ikke dersom funksjonene er lastet inn, så du må ofte restarte RStudio først.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "qualcontrol"
    ]
  },
  {
    "objectID": "pakker/qualcontrol.html#funksjoner-og-syntaks",
    "href": "pakker/qualcontrol.html#funksjoner-og-syntaks",
    "title": "qualcontrol",
    "section": "",
    "text": "Funksjonene i qualcontrol skal i hovedsak bruke funksjoner fra pakkene data.table og collapse.\nBare hovedfunksjoner som inkluderes i brukerfilene skal være eksporterte objekter, mens alle andre funksjoner skal betegnes med roxygen-taggen @keywordsinternal. Små hjelpefunksjoner som ikke trenger utdypende dokumentasjon kan også tagges med @noRd for å ikke generere en hjelpefil.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "qualcontrol"
    ]
  },
  {
    "objectID": "pakker/qualcontrol.html#utvikling-av-funksjoner",
    "href": "pakker/qualcontrol.html#utvikling-av-funksjoner",
    "title": "qualcontrol",
    "section": "",
    "text": "Ved utvikling av nye funksjoner finner du nyttige koder i mappen dev og filene dev.R (lese inn testfiler), benchmarking.R (sammenligne funksjoner mtp hastighet) og profiling.R (analysere tid- og minnebruk for ulike steg i funksjonen).",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "qualcontrol"
    ]
  },
  {
    "objectID": "pakker/qualcontrol.html#testing",
    "href": "pakker/qualcontrol.html#testing",
    "title": "qualcontrol",
    "section": "",
    "text": "For å sikre at pakken fungerer som den skal, er målet at så mye som mulig av koden skal være dekket av tester. For å teste pakken bruker du Ctrl + Shift + T. For å sjekke hvor mye av koden som er dekket kan du bruke devtools::test_coverage(), som genererer en rapport som blant annet viser hvor stor andel av funksjonell kode som ikke er dekket av testene. Denne fungerer ikke dersom funksjonene er lastet inn, så du må ofte restarte RStudio først.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "qualcontrol"
    ]
  },
  {
    "objectID": "pakker/norgeo.html",
    "href": "pakker/norgeo.html",
    "title": "norgeo",
    "section": "",
    "text": "Informasjon om R-pakken finnes her\nFunksjonene i pakken brukes til å oppdatere tabeller i GEO-databasen.\nSplitting av kommuner/fylker håndteres manuelt ved å kjøre respektive script fra backend/norgeo på GitHub. Disse aktiveres når argumentet fix = TRUE i norgeo-funksjonene. Disse må oppdateres når nye geosplittinger forekommer, dette gjør du i backend.\n\nGEO-databasen\nGEO-databasen oppdateres ved hjelp av norgeo-funksjoner. Brukerfiler med kode for å oppdatere tabellene finner du i backend/geomaster\n\nFor å oppdatere tabellene i geodatabasen, bruk filen: ORGDATA_tabeller.Rmd\nFor å oppdatere tabeller i KHELSA.mdb, bruk filen: GEO_tabeller.Rmd\n\n\n\nOm pakken\nNorgeo ble skrevet og utviklet av Yusman Bin Kamaleri.\nPakken inneholder funksjoner for å hente ut informasjon om geografisk inndeling fra SSB via API.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "norgeo"
    ]
  },
  {
    "objectID": "oppsett.html",
    "href": "oppsett.html",
    "title": "Sette opp systemet",
    "section": "",
    "text": "Følg stegene under. Det er viktig at hvert steg fullføres før du går videre til neste!\n\n1. Installere R, Rstudio, Rtools, Git og STATA\nI Firmaportal, installer programmene:\n\nR (minimum versjon 4.4.0)\nRstudio\nRtools (versjon 4.4, tilsvarende R-versjonen)\nGit\nSTATA (trengs for å kjøre STATA-snutter)\n\n\n\n2. Sette opp Git i RStudio\nÅpne Rstudio og gå til Tools -&gt; Global Options -&gt; GIT/SVN. Sjekk at Enable version control er huket av og at git.exe-filen er angitt. Dette er viktig for å kunne synkronisere prosjekter og installere pakker som ligger på GitHub.\n\n\n2b. Autentisering i git\nDette er bare aktuelt om du har behov for å laste opp endringer til GitHub. For å sette opp autentisering i GitHub, bruk følgende kode. Det kan være du må installere pakken usethis først.\nusethis::create_github_token()\nDette tar deg til GitHub i nettleseren, hvor du kan sette opp en token som kobler din påloggingsinformasjon til RStudio. Denne må du kopiere. Deretter kjører du følgende i RStudio.\ngitcreds::gitcreds_set()\nFølg instruksjonene og lim inn koden fra GitHub.\n\n\n3. Sette encoding (valgfri, men veldig nyttig)\nFra og med R versjon 4.2 ble det innført en endring i encoding, som gjør at norske bokstaver ikke leses korrekt. Vi må derfor sette encoding manuelt. For at dette skal skje automatisk når du bruker R, kan dette med fordel legges direkte i .rprofile som er et script som kjøres ved oppstart. For å redigere denne kan du skrive følgende i konsollen, og endre filen som åpnes. Det kan være du må installere pakken usethis først.\nusethis::edit_r_profile()\nI dokumentet som åpnes legger du til følgende, og lagrer dokumentet:\n\nSys.setlocale(“LC_ALL”, “nb-NO.UTF-8”)\n\n\n\n4. Installere pakkene\nI konsollen, kjør følgende kode for å installere alle pakker og sette opp mappestruktur:\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/install.R\")\nProfileSystems()\nFunksjonen gjør:\n\nOppretter mappen C:/Users/Navn/helseprofil. Denne er viktig da den brukes til å lagre midlertidige filer lokalt på den PCen som gjennomfører databehandling.\nOppretter R-prosjektet produksjon, som inneholder brukerfiler for de ulike delene av produksjonsapparatet.\nInstallerer alle nødvendige pakker, inkludert våre lokale pakker norgeo, orgdata, qualcontrol\n\nEtter installasjon kan du finne mappen produksjon i filbehandleren (eller via RStudio) og åpne filen produksjon.Rproj. Når du først har åpnet den vil du finne den i prosjektlisten oppe til høyre i RStudio.\nDersom du ønsker å ha prosjektene et annet sted enn i helseprofilmappen kan du spesifisere argumentet path\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/install.R\")\nProfileSystems(path = \"Din/favoritt/mappe\")\n\n\nFor utviklere\n\nDu må først gjøre stegene over for å installere alle nødvendige R-pakker.\n\nSkal du bidra til utvikling av databehandlingssystemet trenger du tilgang til alle relevante underprosjekter. Disse kan klones ved å bruke følgende funksjon. Dersom du setter getupdates = TRUE vil den også oppdatere prosjekter du allerede har installert.\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/install.R\")\nDevelopSystems(path = \"Din/favoritt/mappe\", getupdates = FALSE)\nDette installerer følgende prosjekter:\n\nproduksjon\nbackend\nnorgeo\norgdata\nkhfunctions\norgcube (foreløpig navn på pakke som skal erstatte khfunctions)\nqualcontrol\nmanual\n\nDe ulike prosjektene inneholder ulike deler av produksjonsapparatet, og synkroniseres med GitHub.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Sette opp systemet</b>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Håndboka",
    "section": "",
    "text": "Her finner du informasjon og veiledning for å installere og bruke de viktigste delene av produksjonsapparatet for arbeidet med folkehelse- og oppvekstprofiler. All kode ligger her.\nBruk menyen til venstre for å navigere i håndboken."
  },
  {
    "objectID": "index.html#innhold",
    "href": "index.html#innhold",
    "title": "Håndboka",
    "section": "Innhold:",
    "text": "Innhold:"
  },
  {
    "objectID": "backend/norgeo.html",
    "href": "backend/norgeo.html",
    "title": "norgeo",
    "section": "",
    "text": "Inneholder R-skript som manuelt håndterer splitting av geografiske enheter.\nDisse må oppdateres dersom det kommer nye splittinger.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "norgeo"
    ]
  },
  {
    "objectID": "backend/geomaster.html",
    "href": "backend/geomaster.html",
    "title": "geomaster",
    "section": "",
    "text": "Inneholder R- og STATA-kode som inngår i oppdatering av GEO-tabeller, samt brukerfiler for å faktisk oppdatere tabellene.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "geomaster"
    ]
  },
  {
    "objectID": "backend/backup.html",
    "href": "backend/backup.html",
    "title": "backup",
    "section": "",
    "text": "Inneholder R-script for oppdatering av ACCESS-databasen.\nKan brukes ved å source følgende dokument:\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/backup/backup_khelsa.R\")\nDeretter kan du ta backup av databasen ved å bruke funksjonen slik, og endre til nyeste profilårgang.\nbackup(profilaargang = 2025)",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "backup"
    ]
  },
  {
    "objectID": "backend.html",
    "href": "backend.html",
    "title": "Prosjekt: backend",
    "section": "",
    "text": "Backend er et R-prosjekt som inneholder alt som har å gjøre med vedlikehold og oppdatering av produksjonsløypen. Dette kan for eksempel være oppdatering av GEO-tabeller eller konfigurasjonsfiler. Se undersidene for nærmere instruks om hvordan du bruker disse.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>"
    ]
  },
  {
    "objectID": "backend.html#innhold",
    "href": "backend.html#innhold",
    "title": "Prosjekt: backend",
    "section": "Innhold:",
    "text": "Innhold:",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>"
    ]
  },
  {
    "objectID": "backend/config.html",
    "href": "backend/config.html",
    "title": "config",
    "section": "",
    "text": "Inneholder konfigurasjonsfiler for de ulike pakkene. Disse leses inn og settes som options i R.\nFilene er .yml-filer, og leses inn med funksjonen yaml::load_file() som er innbakt i orgdata:::is_globs(). Denne kjøres når pakkene orgdata og qualcontrol lastes, og henter inn ulike options som brukes i ulike funksjoner.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "config"
    ]
  },
  {
    "objectID": "backend/misc.html",
    "href": "backend/misc.html",
    "title": "misc",
    "section": "",
    "text": "Inneholder ulike R-funksjoner som ikke passer andre steder. kode for å laste inn og beskrivelser av hva de ulike filene inneholder ligger under.\n\nR/install.R\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/install.R\")\nDette skriptet inneholder funksjonene for å sette opp systemet for databehandling.\n\nProfileSystems() installerer (og oppdaterer) pakker (fra CRAN og egne pakker på github), og kloner brukerprosjektet produksjon\nDevelopSystems() kloner i tillegg alle andre prosjekter: backend, orgdata, norgeo, qualcontrol, khfunctions/orgcube, manual.\n\nFor alle som skal vedlikeholde eller utvikle systemene er disse prosjektene nødvendig å ha tilgang til.\n\ncheck_R_version() brukes i begge funksjonene over for å sjekke at man bruker en tilstrekkelig ny versjon av R (&gt; 4.4.0)\n\n\n\nR/misc.R\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/misc.R\")\n\nare_same() er en funksjon som sjekker om to funksjoner er identiske. Kan være et nyttig verktøy når man utvikler nye funksjoner da den fremhever hva som er forskjellig.\nlist_funs() er en funksjon som lister opp alle funksjoner i en pakke som en lang regex-string. Kan være nyttig om du trenger å søke i et prosjekt etter funksjoner fra en spesifikk pakke.\n\n\n\nR/ungdata.R\nsource(\"https://raw.githubusercontent.com/helseprofil/backend/main/misc/R/ungdata.R\")\nInneholder funksjoner for å generere en nøkkel for vurdering av ungdatafiler\n\nfil &lt;- readUngdata(year, file). Leser inn en ungdatafil fra PRODUKSJON/ORGDATA/NOVA/Ungdata/\nungdataKey(fil). Genererer en CSV-fil med nøkkel, som lagres i helseprofil-mappen lokalt.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "misc"
    ]
  },
  {
    "objectID": "backend/snutter.html",
    "href": "backend/snutter.html",
    "title": "snutter",
    "section": "",
    "text": "Inneholder R-skript som styrer spesialbehandling av datafiler.\nDisse spesialsnuttene kan brukes på flere steder i løypen, og hvilket script som skal kjøres må spesifiseres i relevante kolonner i access. For å kjøre et script fra github, bruk følgende, og erstatt MAPPE og FILNAVN.R med for å vise til riktig fil.\nDet er viktig å huske local = TRUE, da dette sørger for at scriptet blir kjørt i det miljøet det blir hentet inn i, altså inni den aktuelle funksjonen (ikke global environment).",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "snutter"
    ]
  },
  {
    "objectID": "backend/snutter.html#andre-snutter",
    "href": "backend/snutter.html#andre-snutter",
    "title": "snutter",
    "section": "Andre snutter",
    "text": "Andre snutter\nDe fleste R- og STATA-snuttene ligger i mappen BIN/Z_Statasnutter, og leses direkte herfra.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - Backend</b>",
      "snutter"
    ]
  },
  {
    "objectID": "newyear.html",
    "href": "newyear.html",
    "title": "Oppdatere til ny årgang",
    "section": "",
    "text": "Ved overgang til nytt profilår er det en rekke ting som må gjøres for å oppdatere produksjonsapparatet. Lister og veiledning over alt som må gjøres for de ulike delene av systemet finnes i kapitlene under.\nDette håndteres hovedsakelig i R-prosjektet backend, men noe må også gjøres i de enkelte pakkene.\n\nGEO-databasen\n\nVed overgang til ny årgang må man oppdatere geotabellene. Se her for innstruks.\n\nOppdater respektive omkodingstabeller\nOppdater koblingstabellen tblGeo\n\n\n\n\nKonfigurasjonsfiler\n\nKonfigurasjonsfilene for orgdata, qualcontrol, og etterhvert orgcube (foreløpig navn) må oppdateres mht årgang.\n\n\n\nkhfunctions\n\nKHaargang må oppdateres i filen KHglobs.R\nGEO-tabeller i KHELSA.mdb må oppdateres om det er kommet endringer\n\n\n\nqualcontrol\n\nInterne tabeller i qualcontrol må oppdateres. Disse inneholder informasjon om geo-omkoding, populasjonsvekter, og dimensjoner/verdikolonner. Inne i R-prosjektet kan disse oppdateres ved å bruke følgende funksjon. Husk å oppdatere pakkeversjon og pushe endringene til GitHub.\nupdate_internal_data(geoyear = 2025, overwrite = TRUE)",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Oppdatere til nytt produksjonsår</b>"
    ]
  },
  {
    "objectID": "pakker/khfunctions.html",
    "href": "pakker/khfunctions.html",
    "title": "khfunctions",
    "section": "",
    "text": "Noen tips\n\nBruke spesifikk versjon\nFor å bruke en spesifikk versjon av prosjektet kan du bruke funksjonen usebranch(\"navn på github branch\"), dette laster alle funksjoner fra valgte branch.\n\n\nBruke lokal versjon\nNår du gjør endringer i koden og vil teste denne uten å pushe til GitHub, kan du bruke funksjonen uselocal(test = FALSE) som laster alle funksjonene fra de lokale filene. For å teste endringer i ACCESS kan du bruke test = TRUE, som bytter til å bruke databasefilene test/KHELSAtest.mdb og test/KHloggtest.mdb. Overskriv gjerne disse med ny kopi av den skarpe databasen før testing.\n\n\nKjøre linje for linje\nNår en kjøring krasjer kan det være nyttig å kjøre funksjonen linje for linje for å finne problemet. I slike situasjoner kan du bruke funksjonen .SetKubeParameters(\"KUBENAVN\") for å sette alle argumentene i LagKUBE().\n\n\nSpore opp funksjoner som brukes til debugging\nFor å se hvilke funksjoner som brukes eller aktiveres når man kjører LagFilgruppe eller LagKUBE kan man sette show_functions = TRUE . Dersom du vil se funksjonen inkludert argumentene, kan du definere show_arguments = TRUE. Dersom begge er satt til TRUE, vil show_functions brukes til debugging.\n\n\nLagre loggfil som tekstdokument\nKonsollenhar en begrensning på hvor mange linjer som vises, av minnehensyn. Derfor vil ikke hele prosessen kunne vises for store funksjoner som lagKUBE, som overskrider denne grensen. For å komme rundt dette, kan du printe all output til et tekstdokument som lagres eksternt, ved hjelp av funksjonen sink()\nDette er spesielt nyttig i kombinasjon med debuggingalternativene over, da du kan få ut en komplett logg over alle funksjoner som blir kjørt.\n\nDefiner hvor du vil lagre loggen med sink()\nsink(file = \"filsti/.../.../filnavn.txt\")  \n\n\n\nKjør koden, f.eks. lagKUBE, hvor du også ønsker å få ut alle funksjonene med argumenter.\nshow_arguments &lt;- TRUE \nlagKUBE(\"NAVN\")  \n\n\n\nLukk koblingen til den eksterne filen etter at du er ferdig\nsink(file = NULL)\n\n\n\n\nOversikt over prosjektet\nAll kode i prosjektet ligger i mappen R, fordelt på følgende scriptfiler. Her følger en oversikt over relevante filer og hva disse inneholder. De enkelte funksjonene er (delvis) dokumentert direkte i filene de ligger i.\n\nKHsetup.R\nLastes inn i .Rprofile.\nSetter encoding for å håndtere norske bokstaver, oppdaterer lockfilen dersom man er i master-branch, laster inn alle pakker og bruker pakken conflicted til å velge hvilken funksjon som skal brukes i de tilfellene flere funksjoner har samme navn. I praksis forsøkes det å konsekvent bruke pakke::funksjon() for å bruke riktig funksjon, men dette sparer uansett en del advarsler ved oppstart. Laster deretter inn alle de andre filene som inneholder interne funksjoner.\n\n\nKHupdate.R\nLastes inn i .Rprofile\nSjekker verdien av .lastupdate, som defineres øverst i filen, på GitHub mot lokal versjon. Dersom disse ikke er like får brukeren mulighet til å laste ned siste versjon.\nVIKTIG: ved oppdatering av pakkeversjoner eller lignende må .lastupdate også oppdateres slik at endringen kommuniseres ut til brukerne. Ved flere endringer samme dag kan verdien settes til f.eks. “02.05.2024b” for å skille fra tidligere versjon samme dag.\n\n\nKHmisc.R\nLastes inn av KHsetup.R.\nInneholder funksjoner som brukes både i LagFilgruppe() og LagKUBE().\n\n\nKHpaths.R\nLastes inn av KHsetup.R.\nSetter grunnsti til produksjonsmappen og til KHELSA.mdb og KHlogg.mdb. Inneholder også funksjoner for testing og lokal kjøring, men disse brukes lite.\n\n\nKHglobs.R\nLastes inn av KHsetup.R.\nSetter alle globale parametre og lager objektet KHglobs som brukes i de fleste funksjoner i prosjektet.\n\n\nKHfilgruppefunctions.R\nLastes inn av KHsetup.R.\nInneholder funksjoner som brukes i LagFilgruppe().\n\n\nKHfilgruppe.R\nLastes inn av KHsetup.R.\nInneholder hovedfunksjonen LagFilgruppe().\n\n\nKHkubefunctions.R\nLastes inn av KHsetup.R.\nInneholder funksjoner som brukes i LagKUBE().\n\n\nKHkube.R\nLastes inn av KHsetup.R.\nInneholder hovedfunksjonen LagKUBE().\n\n\nKHother.R\nLastes inn av KHsetup.R\nInneholder funksjoner som ikke brukes i hovedfunksjonene, bl.a. for sammenligning av kubefiler. Trolig overflødige, og kan muligens overføres til KHgraveyard.R.\n\n\nKHgraveyard.R\nLastes ikke inn.\nInneholder utgåtte funksjoner som ikke brukes lenger. Andre funksjoner som erstattes eller utgår kan flyttes hit i stedet for å slettes.\n\n\n\nHistorikk\nKHfunctions er Hovedhjernen til dataprosessering for folkehelseprofilene. Koden er hovedsakelig utviklet og skrevet av Kåre Bævre. Prosjektet ble videre utviklet av Yusman Bin Kamaleri frem til høsten 2022.\nI april 2023, i forbindelse med overgang til nytt publikasjonssystem, ble det gjennomført en større omstrukturering hvor all kode som tidligere var samlet i en stor fil khfunctions.R ble splittet opp i mange mindre filer, som ligger i mappen R. Filene er organisert etter hvor i prosjektet de ulike funksjonene brukes, og mange funksjoner ble også fjernet da de ikke lenger var i bruk. Dette ble gjort for å gjøre jobben med vedlikehold og videreutvikling lettere.\nEn kopi av prosjektet slik det var før omstruktureringen finnes i branchen som heter “masterpreallvis”.\nDokumentasjon av LagFilgruppe (Skrevet av Yusman Bin Kamaleri)\n\n\nRelevante linker:\n\n\n\n\n\n\n\n\n\n\n\n\n\nKHELSA.mdb\n\n\nInformasjon om access-databasen knyttet til khfunctions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nkhfunctions\n\n\nInformasjon om kubekjøring\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "khfunctions"
    ]
  },
  {
    "objectID": "pakker/orgdata.html",
    "href": "pakker/orgdata.html",
    "title": "orgdata",
    "section": "",
    "text": "Noen tips\n\nOrgdata og R versjon\nFra og med R versjon 4.2 ble default encoding endret. Dette medførte problemer med å lese norske bokstaver i Access og datafilene, som gav mismatch i kolonnenavn og krasj. Dette er fikset fra og med orgdata versjon 1.4.7, da encodingsystem for access og csv-filer nå defineres separat. Dette har medført at orgdata ikke lenger er kompatibelt med tidligere versjoner av R.\nHar du behov for å bruke R-versjon tidligere enn 4.2 (f.eks. 4.1.3), må du derfor installere orgdata versjon 1.4.6. Dette gjøres ved følgende kommando i konsollen.\npak::pkg_install(helseprofil/orgdata@v1.4.6) \n\n\nError loading “lazy-load database …. is corrupt”\nNår man installerer orgdata i RStudio kan det opptå feil ved kompilering av dokumentasjonen for .Rdb filer. Prøv:\n\nRestarte R bl.a ved å kjøre .rs.restartR()\nSlett orgdata med remove.packages(\"orgdata\")\nRestarte RStudio\nInstallere orgdata på nytt\n\n\n\nError ved oppgradering\nPrøv å gjøre det akkurat som for Error loading.. ovenfor.\n\n\nError with rlang\nHvis du får denne feilmelding om rlang versjon\n&gt; library(orgdata) Error: package or namespace load failed for ‘orgdata’ in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]):  namespace ‘rlang’ 1.0.2 is being loaded, but &gt;= 1.0.5 is required \nSlett eller uninstall rlang med remove.packages(\"rlang\"). Installere på nytt med install.packages(\"rlang\").\nHvis det ikke løser problemmet, slett alle pakke mappen i den R versjon du bruker. Mappen for R pakker ligger i C:\\Program Files\\R. Deretter installere rlang på nytt.\n\n\n\nOm prosjektet\nOrgdata ble skrevet og vedlikeholdt av Yusman Bin Kamaleri fra sommeren 2021, frem til høsten 2023.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Vedlikehold og utvikling</b>",
      "orgdata"
    ]
  },
  {
    "objectID": "produksjon.html",
    "href": "produksjon.html",
    "title": "Produksjon",
    "section": "",
    "text": "Produksjon er hovedprosjektet som brukes i databehandlingen. Her finner du brukerfiler for de ulike delene av produksjonsapparatet. Les mer om disse på de ulike undersidene.\nFor å bruke produksjon, åpner du .Rproj-filen i produksjonsprosjektet, eller velger produksjon fra nedtrekksmenyen øverst til høyre i RStudio (forutsatt at du tidligere har åpnet prosjektet).",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>"
    ]
  },
  {
    "objectID": "produksjon.html#innhold",
    "href": "produksjon.html#innhold",
    "title": "Produksjon",
    "section": "Innhold:",
    "text": "Innhold:",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>"
    ]
  },
  {
    "objectID": "produksjon/khfunctions-naboprikktriangler.html",
    "href": "produksjon/khfunctions-naboprikktriangler.html",
    "title": "Naboprikktriangler",
    "section": "",
    "text": "Alle dimensjoner som inneholder under- og overgruppe(r) skal i prinsippet naboprikkes (men sjekk avsnittet “Tvilstilfeller” på slutten av dokumentet).\nTypisk eksempel: KJONN med sine undergrupper “menn” og “kvinner”, og sin overgruppe “kjønn samlet”.\nDersom én undergruppe er med, skal, i prinsippet, alle undergrupper være med\nAnta at man ønsker å publisere tall for ALDER=“0-120” og ALDER=“70-120”.\nUndergruppen ALDER=“0-69” skal ikke publiseres, men må lages og være med i kuben frem til og med naboprikkingen.\nUndergruppen ALDER=“0-69” kan kastes etter at naboprikkingen er gjennomført. I skrivende stund anbefaler vi at dette gjøres med en snutt på RSYNT_POSTPROSESS, f.eks.\ndrop if ALDER==“0-69”"
  },
  {
    "objectID": "produksjon/khfunctions-naboprikktriangler.html#bærende-prinsipper-for-naboprikking",
    "href": "produksjon/khfunctions-naboprikktriangler.html#bærende-prinsipper-for-naboprikking",
    "title": "Naboprikktriangler",
    "section": "",
    "text": "Alle dimensjoner som inneholder under- og overgruppe(r) skal i prinsippet naboprikkes (men sjekk avsnittet “Tvilstilfeller” på slutten av dokumentet).\nTypisk eksempel: KJONN med sine undergrupper “menn” og “kvinner”, og sin overgruppe “kjønn samlet”.\nDersom én undergruppe er med, skal, i prinsippet, alle undergrupper være med\nAnta at man ønsker å publisere tall for ALDER=“0-120” og ALDER=“70-120”.\nUndergruppen ALDER=“0-69” skal ikke publiseres, men må lages og være med i kuben frem til og med naboprikkingen.\nUndergruppen ALDER=“0-69” kan kastes etter at naboprikkingen er gjennomført. I skrivende stund anbefaler vi at dette gjøres med en snutt på RSYNT_POSTPROSESS, f.eks.\ndrop if ALDER==“0-69”"
  },
  {
    "objectID": "produksjon/khfunctions-naboprikktriangler.html#i-praksis.",
    "href": "produksjon/khfunctions-naboprikktriangler.html#i-praksis.",
    "title": "Naboprikktriangler",
    "section": "2. I praksis.",
    "text": "2. I praksis.\nPrioritert rekkefølge.\nOver- og undergruppene angis i ønsket prioriteringsrekkefølge (fra høyeste til laveste). Eksempel KJONN: Vanligvis er det “kjønn samlet” som har høyest prioritet, og dette angis slik:\nKJONN~{0,2,1} (i dette tilfellet er det arbitrært om man skriver {0,2,1} eller {0,1,2}\nPrioriteringsrekkefølgen kan, en sjelden gang, variere innenfor en kube. Dette kan spesifiseres på denne måten\nKJONN~niva1{0,1,2 (2,0,1_if_AARSAK==BRYSTKREFT) (1,0,2_if_AARSAK==PROSTATAKREFT)}\nNB: Ang. “AARSAK” og andre såkalte spesialdimensjoner som er spesielle for den enkelte kube; -du må til KHELSA\\FILGRUPPER for å finne dette variabelnavnet (under TAB1, TAB2 eller TAB3).\nFlere nivå.\nNivåene må tas i riktig rekkefølge, så de må angis slik (niva2 er undergrupper av niva1):\nALDER~niva1{…}niva2{…}{…}\n\n\n\n\n\n\nPrinsipp:\na) Hvert triangel så lite som mulig (så grov-inndelte grupper som mulig)\nb) Gjensidig utelukkende undergrupper (overgruppe=undergr.1 + undergr.2 + … + undergr.N)\n\n\n\nEksempel 1: Hva er problemet med INNVKAT~{23, 2, 3} ?\n2 og 3 er født i Norge med innvandrerforeldre, og født i utlandet. 23 er summen av 2 og 3, altså alle med innvandrerbakgrunn.\nProblemet er befolkning totalt (kategorien “0”) finnes i andre tabeller, og åpner for tilbakeberegning av øvrig befolkning (kategorien “20”). For å være helt på den trygge siden må man altså ha med kategoriene “0” og “20” i naboprikkingen. De mest grov-inndelte undergruppene (“20” og “23”) på nivå 1 (sammen med sin overgruppe “0”), og de mest fininndelte (“2” og “3”) på nivå 2 (sammen sin overgruppe “23”):\nINNVKAT~niva1{0, 20, 23}niva2{23, 2, 3}\nEksempel 2: Innviklede aldersgrupper for ENPERSON  \nVi foreslår følgende fremgangsmåte for definering av triangler og nivåer:\n\nStarte med å tegne opp trianglene på papir.\nDeretter skrive opp trianglene på hvert nivå, med overgruppen først for oversiktens skyld (merket med kursiv):\nNivå1: {16_120,45_120, 30_44,16_29}\nNivå2: {45_120,75_120,45_74}\nnivå 3: \n{45_74,45_64,65_74}\n{75_120,75_84,85_120}\nEndre prioriteringsrekkefølgen innad i hvert triangel (om ønskelig):\nNivå1: {45_120, 16_120, 30_44,16_29}\nNivå2: {45_120,75_120,45_74}\nnivå 3: \n{45_74,45_64,65_74}\n{75_120,75_84,85_120}\nSkrive inn i Access:\nALDER~niva1{45_120,16_120,30_44,16_29}niva2{45_120,75_120,45_74}niva3{45_74,45_64,65_74}{75_120,75_84,85_120}\n\nTvilstilfeller.\nEksempel 1, DAAR\nNedenfor er det én overgruppe og to undergrupper, som i prinsippet krever naboprikking. For å få til dette måtte man også hatt en undergruppe for “Andre hjerte- og karsykdommer”.\n\nUten naboprikking kan man regne seg frem til antall tilfeller i den implisitte undergruppen “Andre hjerte- og karsykdommer”. Dette antallet er imidlertid spredd på så mange ulike diagnoser at vi ikke anser at opplysningen er særlig informativ eller sensitiv.\nEksempel 2, HKR.\nI HKR kan man ikke legge til grunn at antallet i en overgruppe er lik summen av antall i undergrupper (fordi samme person kan figurere f.eks. kan telle med i flere diagnoseundergrupper, men bare én gang i overgruppen). Her blir altså naboprikking på diagnose overflødig."
  },
  {
    "objectID": "produksjon/orgdata-access.html",
    "href": "produksjon/orgdata-access.html",
    "title": "raw-database.accdb",
    "section": "",
    "text": "Du får advarselen når du skal legge LESID og FILGRUPPE etter at du har lagt inn FILNAVN. Trykk OK og flytt cursor ned eller opp. Deretter bør du kunne legge LESID og FILGRUPPE.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#advarsel-kan-ikke-legge-til-poster-i-access",
    "href": "produksjon/orgdata-access.html#advarsel-kan-ikke-legge-til-poster-i-access",
    "title": "raw-database.accdb",
    "section": "",
    "text": "Du får advarselen når du skal legge LESID og FILGRUPPE etter at du har lagt inn FILNAVN. Trykk OK og flytt cursor ned eller opp. Deretter bør du kunne legge LESID og FILGRUPPE.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#kan-ikke-lese-filen-flere-ganger-i-access",
    "href": "produksjon/orgdata-access.html#kan-ikke-lese-filen-flere-ganger-i-access",
    "title": "raw-database.accdb",
    "section": "Kan ikke lese filen flere ganger i Access",
    "text": "Kan ikke lese filen flere ganger i Access\nFor å kunne lese en fil flere ganger f.eks annen fane i en Excel fil, kan gjøres ved å velge Rediger knappen. Valg FILID av filen, men IKKE skrive filstien på nytt siden den allerede finnes i databasen ie. original filer.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#hvordan-finner-jeg-filid-av-en-tidligere-rawfil",
    "href": "produksjon/orgdata-access.html#hvordan-finner-jeg-filid-av-en-tidligere-rawfil",
    "title": "raw-database.accdb",
    "section": "Hvordan finner jeg FILID av en tidligere rawfil",
    "text": "Hvordan finner jeg FILID av en tidligere rawfil\nTrykk knappen Orgfiler. En ny fane som heter Originalfiler åpnes hvor du kan søke filen du er interessert i. Deretter ser du FILID til filen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#feilmelding-om-dublettverdier-i-en-indeks-primærnøkkel-eller-relasjon.",
    "href": "produksjon/orgdata-access.html#feilmelding-om-dublettverdier-i-en-indeks-primærnøkkel-eller-relasjon.",
    "title": "raw-database.accdb",
    "section": "Feilmelding om “dublettverdier i en indeks, primærnøkkel eller relasjon”.",
    "text": "Feilmelding om “dublettverdier i en indeks, primærnøkkel eller relasjon”.\nDette skjer ofte når man skal legge inn ny rawfil som allerede finnes i databasen. Trykk knappen Orgfiler og bruk FILID til den filen som allerede finnes i databasen istedenfor å legge den på nytt.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#kan-ikke-se-doble-anførselstegn-i-access-når-kodebok-for-type-er-re",
    "href": "produksjon/orgdata-access.html#kan-ikke-se-doble-anførselstegn-i-access-når-kodebok-for-type-er-re",
    "title": "raw-database.accdb",
    "section": "Kan ikke se doble anførselstegn \"\" i Access når kodebok for TYPE er RE",
    "text": "Kan ikke se doble anførselstegn \"\" i Access når kodebok for TYPE er RE\nNår en kolonne skal omkodes ved bruk av TYPE lik RE til \"\" blir symbolen likevel forsvant eller usynlige når cursor blir flyttet. Løsningen er å skrive enten delete eller slett i TIL for å gjøre det tydelig. Selvsagt funker det med \"\" også, hvis du vil gjøre det vanskelig for deg selv og andre å se hva som egentlig definert i kodeboken 😀",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/orgdata-access.html#kolonnenavn-med-æøå---bruk-regulært-uttrykk-i-manheader-ved-behov",
    "href": "produksjon/orgdata-access.html#kolonnenavn-med-æøå---bruk-regulært-uttrykk-i-manheader-ved-behov",
    "title": "raw-database.accdb",
    "section": "Kolonnenavn med ÆØÅ - bruk regulært uttrykk i MANHEADER ved behov",
    "text": "Kolonnenavn med ÆØÅ - bruk regulært uttrykk i MANHEADER ved behov\nOppdatering: Fra versjon 1.2.1 kan man bruke regulært uttrykk dvs. ^$\\[.*\\] osv. i MANHEADER også f.eks ^utdan=UTDANNING for å gi nytt navn for spesielle kolonner f.eks et langt og med æøå kolonnenavn utdanning særlig før migrasjonsår til et kort kolonnenavn UTDANNING.\nMANHEADER: Dette feltet i Access-specen gjør at kolonnehoder i innfilen erstattes med noe vi skriver. De “vanskelige” kolonnehodene angis med nummer, og bør gis navn uten ÆØÅ.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b> ACCESS-databaser </b>",
      "raw-database.accdb"
    ]
  },
  {
    "objectID": "produksjon/qualcontrol.html",
    "href": "produksjon/qualcontrol.html",
    "title": "qualcontrol",
    "section": "",
    "text": "qualcontrol er en R-pakke som inneholder funksjoner for å gjennomføre kvalitetskontrollen av publikasjonsklare datafiler.\nBrukerfiler:\n\nqualcontrol/1. Kvalitetskontrollrutiner - kontroll av enkeltfiler\nqualcontrol/2. Friskvik og barometersjekk - kontroll av godkjente friskvikfiler\n\nFor å bruke khfunctions åpner du produksjonsprosjektet og åpner ønsket brukerfil.\n\n1. Kvalitetskontrollrutiner\nDenne inneholder en strømlinjeformet oversikt over kvalitetskontrollrutinene og følges nedover. Resultater vil lagres i PRODUKSJON/VALIDERING/QualControl/**PRODUKSJONSÅR**/**KUBENAVN**\n\nForarbeid\n\nFor å få tilgang til funksjonene må første kodeblokk med library(qualcontrol) kjøres.\nDu kan endre produksjonsåret med funksjonen update_qcyear(). Dette bestemmer hvilken mappe resultatfilene vil publiseres i.\n\nDe ulike stegene dokumenteres i KUBESTATUS-tabellen i KHELSA.mdb.\n\n\n1. Grovsjekk\n\nLast inn ny (og gammel/forrige publiserte) datafil med funksjonen readfiles(), og formatter filene med funksjonen make_comparecube(). Dette vil også produsere noen .csv-filer som lagres i mappen FILDUMPER. ## 1. Deskriptiv grovsjekk\nHer sjekkes hva som finnes i filen, f.eks. hvilke kolonner, hvilke nivåer i dimensjonene\nTidsserier på landsnivå plottes for all dimensjoner for å fange opp eventuell feilklassifisering.\n\n\n\n2. Batch vs Batch\n\nSammenligning mot forrige publiserte fil\nOppsummering av antallet identiske/ulike rader og hvor store forskjellene er\nAntallet forskjellige rader og summen av disse, totalt og per årgang\nPlott av forskjellene over tid, for å se om forskjellene er stabile eller endrer seg over tid\n\n\n\n3. Prikking\n\nEr det noen tall under grensen for personvernskjuling?\nSammenligning av antall skjulte tall, totalt og per årgang\nSammenligning av antall tidsserier med 0-maks antall skjulte tall\n\n\n\n4. Sjekk aggregering\n\nSjekke at lavere geografisk nivå summerer seg opp til høyere, f.eks. at kommuner summerer seg til fylke.\nSjekke andelen ukjent bydel\nPlotte tidsserier for bydelene, og vektede bydelstall mot kommunetallet.\n\n\n\n5. Ekstremverdier\n\nGenererer boksplott og tidsserieplott som markerer ekstremverdier, definert som verdier utenfor intervallet definert av vektet 25.percentil - 1.5 * IQR og vektet 75.percentil + 1.5 IQR.\nDisse vurderes for om de kan være riktige.\n\n\n\n6. Ekstremverdier, år-til-år\n\nSamme som over, men for relativ endring fra forrige årgang. Kan fange opp usannsynlig store endringer fra et år til et annet.\n\n\n\n\n2. Friskvik og barometersjekk\nInneholder to funksjoner, en som sjekker alle friskvikfilene i nyeste godkjentmappe, og en som sjekker om like verdier får farget prikk i barometeret.\nDisse brukes i forbindelse med profilproduksjonen.",
    "crumbs": [
      "Gå til helseprofil på GitHub",
      "<b>Prosjekt - produksjon</b>",
      "qualcontrol"
    ]
  }
]